%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.8 on {{2014,2,4},{19,56,27}}
-module(mesos).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Status/1, enum_value_by_symbol_Status/1]).
-export(['enum_symbol_by_value_Value.Type'/1, 'enum_value_by_symbol_Value.Type'/1]).
-export([enum_symbol_by_value_TaskState/1, enum_value_by_symbol_TaskState/1]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("include/mesos.hrl").
-include("include/gpb.hrl").

encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'Environment.Variable'{} ->
	  'e_msg_Environment.Variable'(Msg);
      #'Environment'{} -> e_msg_Environment(Msg);
      #'CommandInfo.URI'{} -> 'e_msg_CommandInfo.URI'(Msg);
      #'CommandInfo'{} -> e_msg_CommandInfo(Msg);
      #'Value.Text'{} -> 'e_msg_Value.Text'(Msg);
      #'Value.Set'{} -> 'e_msg_Value.Set'(Msg);
      #'Value.Range'{} -> 'e_msg_Value.Range'(Msg);
      #'Value.Ranges'{} -> 'e_msg_Value.Ranges'(Msg);
      #'Value.Scalar'{} -> 'e_msg_Value.Scalar'(Msg);
      #'Value'{} -> e_msg_Value(Msg);
      #'Resource'{} -> e_msg_Resource(Msg);
      #'SlaveID'{} -> e_msg_SlaveID(Msg);
      #'Request'{} -> e_msg_Request(Msg);
      #'Attribute'{} -> e_msg_Attribute(Msg);
      #'SlaveInfo'{} -> e_msg_SlaveInfo(Msg);
      #'FrameworkID'{} -> e_msg_FrameworkID(Msg);
      #'ExecutorID'{} -> e_msg_ExecutorID(Msg);
      #'ExecutorInfo'{} -> e_msg_ExecutorInfo(Msg);
      #'TaskID'{} -> e_msg_TaskID(Msg);
      #'TaskInfo'{} -> e_msg_TaskInfo(Msg);
      #'MasterInfo'{} -> e_msg_MasterInfo(Msg);
      #'FrameworkInfo'{} -> e_msg_FrameworkInfo(Msg);
      #'ResourceStatistics'{} ->
	  e_msg_ResourceStatistics(Msg);
      #'TaskStatus'{} -> e_msg_TaskStatus(Msg);
      #'Filters'{} -> e_msg_Filters(Msg);
      #'Parameter'{} -> e_msg_Parameter(Msg);
      #'Parameters'{} -> e_msg_Parameters(Msg);
      #'Credential'{} -> e_msg_Credential(Msg);
      #'ResourceUsage'{} -> e_msg_ResourceUsage(Msg);
      #'OfferID'{} -> e_msg_OfferID(Msg);
      #'Offer'{} -> e_msg_Offer(Msg)
    end.


'e_enum_Value.Type'('SCALAR', Bin) -> <<Bin/binary, 0>>;
'e_enum_Value.Type'('RANGES', Bin) -> <<Bin/binary, 1>>;
'e_enum_Value.Type'('SET', Bin) -> <<Bin/binary, 2>>;
'e_enum_Value.Type'('TEXT', Bin) -> <<Bin/binary, 3>>.

e_enum_TaskState('TASK_STAGING', Bin) ->
    <<Bin/binary, 6>>;
e_enum_TaskState('TASK_STARTING', Bin) ->
    <<Bin/binary, 0>>;
e_enum_TaskState('TASK_RUNNING', Bin) ->
    <<Bin/binary, 1>>;
e_enum_TaskState('TASK_FINISHED', Bin) ->
    <<Bin/binary, 2>>;
e_enum_TaskState('TASK_FAILED', Bin) ->
    <<Bin/binary, 3>>;
e_enum_TaskState('TASK_KILLED', Bin) ->
    <<Bin/binary, 4>>;
e_enum_TaskState('TASK_LOST', Bin) -> <<Bin/binary, 5>>.

'e_msg_Environment.Variable'(Msg) ->
    'e_msg_Environment.Variable'(Msg, <<>>).


'e_msg_Environment.Variable'(#'Environment.Variable'{name
							 = F1,
						     value = F2},
			     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

e_msg_Environment(Msg) -> e_msg_Environment(Msg, <<>>).


e_msg_Environment(#'Environment'{variables = F1},
		  Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_Environment_variables(F1, Bin)
    end.

'e_msg_CommandInfo.URI'(Msg) ->
    'e_msg_CommandInfo.URI'(Msg, <<>>).


'e_msg_CommandInfo.URI'(#'CommandInfo.URI'{value = F1,
					   executable = F2},
			Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bool(F2, <<B1/binary, 16>>)
    end.

e_msg_CommandInfo(Msg) -> e_msg_CommandInfo(Msg, <<>>).


e_msg_CommandInfo(#'CommandInfo'{uris = F1,
				 environment = F2, value = F3},
		  Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> e_field_CommandInfo_uris(F1, Bin)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_CommandInfo_environment(F2, <<B1/binary, 18>>)
	 end,
    e_type_string(F3, <<B2/binary, 26>>).

'e_msg_Value.Text'(Msg) ->
    'e_msg_Value.Text'(Msg, <<>>).


'e_msg_Value.Text'(#'Value.Text'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_Value.Set'(Msg) -> 'e_msg_Value.Set'(Msg, <<>>).


'e_msg_Value.Set'(#'Value.Set'{item = F1}, Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_Value.Set_item'(F1, Bin)
    end.

'e_msg_Value.Range'(Msg) ->
    'e_msg_Value.Range'(Msg, <<>>).


'e_msg_Value.Range'(#'Value.Range'{'begin' = F1,
				   'end' = F2},
		    Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    e_varint(F2, <<B1/binary, 16>>).

'e_msg_Value.Ranges'(Msg) ->
    'e_msg_Value.Ranges'(Msg, <<>>).


'e_msg_Value.Ranges'(#'Value.Ranges'{range = F1},
		     Bin) ->
    if F1 == [] -> Bin;
       true -> 'e_field_Value.Ranges_range'(F1, Bin)
    end.

'e_msg_Value.Scalar'(Msg) ->
    'e_msg_Value.Scalar'(Msg, <<>>).


'e_msg_Value.Scalar'(#'Value.Scalar'{value = F1},
		     Bin) ->
    e_type_double(F1, <<Bin/binary, 9>>).

e_msg_Value(Msg) -> e_msg_Value(Msg, <<>>).


e_msg_Value(#'Value'{type = F1, scalar = F2,
		     ranges = F3, set = F4, text = F5},
	    Bin) ->
    B1 = 'e_enum_Value.Type'(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_mfield_Value_scalar(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Value_ranges(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Value_set(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_Value_text(F5, <<B4/binary, 42>>)
    end.

e_msg_Resource(Msg) -> e_msg_Resource(Msg, <<>>).


e_msg_Resource(#'Resource'{name = F1, type = F2,
			   scalar = F3, ranges = F4, set = F5, role = F6},
	       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_Value.Type'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Resource_scalar(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Resource_ranges(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_Resource_set(F5, <<B4/binary, 42>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_string(F6, <<B5/binary, 50>>)
    end.

e_msg_SlaveID(Msg) -> e_msg_SlaveID(Msg, <<>>).


e_msg_SlaveID(#'SlaveID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_Request(Msg) -> e_msg_Request(Msg, <<>>).


e_msg_Request(#'Request'{slave_id = F1, resources = F2},
	      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_Request_slave_id(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == [] -> B1;
       true -> e_field_Request_resources(F2, B1)
    end.

e_msg_Attribute(Msg) -> e_msg_Attribute(Msg, <<>>).


e_msg_Attribute(#'Attribute'{name = F1, type = F2,
			     scalar = F3, ranges = F4, set = F5, text = F6},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_Value.Type'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Attribute_scalar(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Attribute_ranges(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_Attribute_set(F5, <<B4/binary, 50>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_mfield_Attribute_text(F6, <<B5/binary, 42>>)
    end.

e_msg_SlaveInfo(Msg) -> e_msg_SlaveInfo(Msg, <<>>).


e_msg_SlaveInfo(#'SlaveInfo'{hostname = F1, port = F2,
			     resources = F3, attributes = F4, id = F5,
			     checkpoint = F6, webui_hostname = F7,
			     webui_port = F8},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 64>>)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> e_field_SlaveInfo_resources(F3, B2)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> e_field_SlaveInfo_attributes(F4, B3)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_SlaveInfo_id(F5, <<B4/binary, 50>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bool(F6, <<B5/binary, 56>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 18>>)
	 end,
    if F8 == undefined -> B7;
       true -> e_type_int32(F8, <<B7/binary, 32>>)
    end.

e_msg_FrameworkID(Msg) -> e_msg_FrameworkID(Msg, <<>>).


e_msg_FrameworkID(#'FrameworkID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_ExecutorID(Msg) -> e_msg_ExecutorID(Msg, <<>>).


e_msg_ExecutorID(#'ExecutorID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_ExecutorInfo(Msg) ->
    e_msg_ExecutorInfo(Msg, <<>>).


e_msg_ExecutorInfo(#'ExecutorInfo'{executor_id = F1,
				   framework_id = F2, command = F3,
				   resources = F4, name = F5, source = F6,
				   data = F7},
		   Bin) ->
    B1 = e_mfield_ExecutorInfo_executor_id(F1,
					   <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_ExecutorInfo_framework_id(F2,
						   <<B1/binary, 66>>)
	 end,
    B3 = e_mfield_ExecutorInfo_command(F3,
				       <<B2/binary, 58>>),
    B4 = if F4 == [] -> B3;
	    true -> e_field_ExecutorInfo_resources(F4, B3)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 74>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 82>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_bytes(F7, <<B6/binary, 34>>)
    end.

e_msg_TaskID(Msg) -> e_msg_TaskID(Msg, <<>>).


e_msg_TaskID(#'TaskID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_TaskInfo(Msg) -> e_msg_TaskInfo(Msg, <<>>).


e_msg_TaskInfo(#'TaskInfo'{name = F1, task_id = F2,
			   slave_id = F3, resources = F4, executor = F5,
			   command = F6, data = F7},
	       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_TaskInfo_task_id(F2, <<B1/binary, 18>>),
    B3 = e_mfield_TaskInfo_slave_id(F3, <<B2/binary, 26>>),
    B4 = if F4 == [] -> B3;
	    true -> e_field_TaskInfo_resources(F4, B3)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_TaskInfo_executor(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_mfield_TaskInfo_command(F6, <<B5/binary, 58>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_bytes(F7, <<B6/binary, 50>>)
    end.

e_msg_MasterInfo(Msg) -> e_msg_MasterInfo(Msg, <<>>).


e_msg_MasterInfo(#'MasterInfo'{id = F1, ip = F2,
			       port = F3},
		 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    e_varint(F3, <<B2/binary, 24>>).

e_msg_FrameworkInfo(Msg) ->
    e_msg_FrameworkInfo(Msg, <<>>).


e_msg_FrameworkInfo(#'FrameworkInfo'{user = F1,
				     name = F2, id = F3, failover_timeout = F4,
				     checkpoint = F5, role = F6},
		    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_FrameworkInfo_id(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 33>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bool(F5, <<B4/binary, 40>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_string(F6, <<B5/binary, 50>>)
    end.

e_msg_ResourceStatistics(Msg) ->
    e_msg_ResourceStatistics(Msg, <<>>).


e_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						   = F1,
					       cpus_user_time_secs = F2,
					       cpus_system_time_secs = F3,
					       cpus_limit = F4,
					       cpus_nr_periods = F5,
					       cpus_nr_throttled = F6,
					       cpus_throttled_time_secs = F7,
					       mem_rss_bytes = F8,
					       mem_limit_bytes = F9,
					       mem_file_bytes = F10,
					       mem_anon_bytes = F11,
					       mem_mapped_file_bytes = F12},
			 Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_double(F2, <<B1/binary, 17>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_double(F3, <<B2/binary, 25>>)
	 end,
    B4 = e_type_double(F4, <<B3/binary, 33>>),
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 56>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 64>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_double(F7, <<B6/binary, 73>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 40>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_varint(F9, <<B8/binary, 48>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    if F12 == undefined -> B11;
       true -> e_varint(F12, <<B11/binary, 96>>)
    end.

e_msg_TaskStatus(Msg) -> e_msg_TaskStatus(Msg, <<>>).


e_msg_TaskStatus(#'TaskStatus'{task_id = F1, state = F2,
			       message = F3, data = F4, slave_id = F5},
		 Bin) ->
    B1 = e_mfield_TaskStatus_task_id(F1,
				     <<Bin/binary, 10>>),
    B2 = e_enum_TaskState(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 34>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bytes(F4, <<B3/binary, 26>>)
	 end,
    if F5 == undefined -> B4;
       true ->
	   e_mfield_TaskStatus_slave_id(F5, <<B4/binary, 42>>)
    end.

e_msg_Filters(Msg) -> e_msg_Filters(Msg, <<>>).


e_msg_Filters(#'Filters'{refuse_seconds = F1}, Bin) ->
    if F1 == undefined -> Bin;
       true -> e_type_double(F1, <<Bin/binary, 9>>)
    end.

e_msg_Parameter(Msg) -> e_msg_Parameter(Msg, <<>>).


e_msg_Parameter(#'Parameter'{key = F1, value = F2},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

e_msg_Parameters(Msg) -> e_msg_Parameters(Msg, <<>>).


e_msg_Parameters(#'Parameters'{parameter = F1}, Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_Parameters_parameter(F1, Bin)
    end.

e_msg_Credential(Msg) -> e_msg_Credential(Msg, <<>>).


e_msg_Credential(#'Credential'{principal = F1,
			       secret = F2},
		 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_bytes(F2, <<B1/binary, 18>>)
    end.

e_msg_ResourceUsage(Msg) ->
    e_msg_ResourceUsage(Msg, <<>>).


e_msg_ResourceUsage(#'ResourceUsage'{slave_id = F1,
				     framework_id = F2, executor_id = F3,
				     executor_name = F4, task_id = F5,
				     statistics = F6},
		    Bin) ->
    B1 = e_mfield_ResourceUsage_slave_id(F1,
					 <<Bin/binary, 10>>),
    B2 = e_mfield_ResourceUsage_framework_id(F2,
					     <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_ResourceUsage_executor_id(F3,
						   <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_ResourceUsage_task_id(F5, <<B4/binary, 42>>)
	 end,
    if F6 == undefined -> B5;
       true ->
	   e_mfield_ResourceUsage_statistics(F6, <<B5/binary, 50>>)
    end.

e_msg_OfferID(Msg) -> e_msg_OfferID(Msg, <<>>).


e_msg_OfferID(#'OfferID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_Offer(Msg) -> e_msg_Offer(Msg, <<>>).


e_msg_Offer(#'Offer'{id = F1, framework_id = F2,
		     slave_id = F3, hostname = F4, resources = F5,
		     attributes = F6, executor_ids = F7},
	    Bin) ->
    B1 = e_mfield_Offer_id(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_Offer_framework_id(F2, <<B1/binary, 18>>),
    B3 = e_mfield_Offer_slave_id(F3, <<B2/binary, 26>>),
    B4 = e_type_string(F4, <<B3/binary, 34>>),
    B5 = if F5 == [] -> B4;
	    true -> e_field_Offer_resources(F5, B4)
	 end,
    B6 = if F6 == [] -> B5;
	    true -> e_field_Offer_attributes(F6, B5)
	 end,
    if F7 == [] -> B6;
       true -> e_field_Offer_executor_ids(F7, B6)
    end.

e_mfield_Environment_variables(Msg, Bin) ->
    SubBin = 'e_msg_Environment.Variable'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Environment_variables([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Environment_variables(Elem, Bin2),
    e_field_Environment_variables(Rest, Bin3);
e_field_Environment_variables([], Bin) -> Bin.

e_mfield_CommandInfo_uris(Msg, Bin) ->
    SubBin = 'e_msg_CommandInfo.URI'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CommandInfo_uris([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_CommandInfo_uris(Elem, Bin2),
    e_field_CommandInfo_uris(Rest, Bin3);
e_field_CommandInfo_uris([], Bin) -> Bin.

e_mfield_CommandInfo_environment(Msg, Bin) ->
    SubBin = e_msg_Environment(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Value.Set_item'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(Elem, Bin2),
    'e_field_Value.Set_item'(Rest, Bin3);
'e_field_Value.Set_item'([], Bin) -> Bin.

'e_mfield_Value.Ranges_range'(Msg, Bin) ->
    SubBin = 'e_msg_Value.Range'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Value.Ranges_range'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_Value.Ranges_range'(Elem, Bin2),
    'e_field_Value.Ranges_range'(Rest, Bin3);
'e_field_Value.Ranges_range'([], Bin) -> Bin.

e_mfield_Value_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Value_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Value_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Value_text(Msg, Bin) ->
    SubBin = 'e_msg_Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Resource_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_slave_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Request_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Request_resources(Elem, Bin2),
    e_field_Request_resources(Rest, Bin3);
e_field_Request_resources([], Bin) -> Bin.

e_mfield_Attribute_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Attribute_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Attribute_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Attribute_text(Msg, Bin) ->
    SubBin = 'e_msg_Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SlaveInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SlaveInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_SlaveInfo_resources(Elem, Bin2),
    e_field_SlaveInfo_resources(Rest, Bin3);
e_field_SlaveInfo_resources([], Bin) -> Bin.

e_mfield_SlaveInfo_attributes(Msg, Bin) ->
    SubBin = e_msg_Attribute(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SlaveInfo_attributes([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_SlaveInfo_attributes(Elem, Bin2),
    e_field_SlaveInfo_attributes(Rest, Bin3);
e_field_SlaveInfo_attributes([], Bin) -> Bin.

e_mfield_SlaveInfo_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_executor_id(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_command(Msg, Bin) ->
    SubBin = e_msg_CommandInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ExecutorInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_ExecutorInfo_resources(Elem, Bin2),
    e_field_ExecutorInfo_resources(Rest, Bin3);
e_field_ExecutorInfo_resources([], Bin) -> Bin.

e_mfield_TaskInfo_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_slave_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TaskInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_TaskInfo_resources(Elem, Bin2),
    e_field_TaskInfo_resources(Rest, Bin3);
e_field_TaskInfo_resources([], Bin) -> Bin.

e_mfield_TaskInfo_executor(Msg, Bin) ->
    SubBin = e_msg_ExecutorInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_command(Msg, Bin) ->
    SubBin = e_msg_CommandInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FrameworkInfo_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_slave_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Parameters_parameter(Msg, Bin) ->
    SubBin = e_msg_Parameter(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Parameters_parameter([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Parameters_parameter(Elem, Bin2),
    e_field_Parameters_parameter(Rest, Bin3);
e_field_Parameters_parameter([], Bin) -> Bin.

e_mfield_ResourceUsage_slave_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceUsage_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceUsage_executor_id(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceUsage_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceUsage_statistics(Msg, Bin) ->
    SubBin = e_msg_ResourceStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_id(Msg, Bin) ->
    SubBin = e_msg_OfferID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_slave_id(Msg, Bin) ->
    SubBin = e_msg_SlaveID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Offer_resources(Elem, Bin2),
    e_field_Offer_resources(Rest, Bin3);
e_field_Offer_resources([], Bin) -> Bin.

e_mfield_Offer_attributes(Msg, Bin) ->
    SubBin = e_msg_Attribute(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_attributes([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Offer_attributes(Elem, Bin2),
    e_field_Offer_attributes(Rest, Bin3);
e_field_Offer_attributes([], Bin) -> Bin.

e_mfield_Offer_executor_ids(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_executor_ids([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Offer_executor_ids(Elem, Bin2),
    e_field_Offer_executor_ids(Rest, Bin3);
e_field_Offer_executor_ids([], Bin) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_double(Value, Bin) ->
    <<Bin/binary, Value:64/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'Environment.Variable' ->
	  'd_msg_Environment.Variable'(Bin);
      'Environment' -> d_msg_Environment(Bin);
      'CommandInfo.URI' -> 'd_msg_CommandInfo.URI'(Bin);
      'CommandInfo' -> d_msg_CommandInfo(Bin);
      'Value.Text' -> 'd_msg_Value.Text'(Bin);
      'Value.Set' -> 'd_msg_Value.Set'(Bin);
      'Value.Range' -> 'd_msg_Value.Range'(Bin);
      'Value.Ranges' -> 'd_msg_Value.Ranges'(Bin);
      'Value.Scalar' -> 'd_msg_Value.Scalar'(Bin);
      'Value' -> d_msg_Value(Bin);
      'Resource' -> d_msg_Resource(Bin);
      'SlaveID' -> d_msg_SlaveID(Bin);
      'Request' -> d_msg_Request(Bin);
      'Attribute' -> d_msg_Attribute(Bin);
      'SlaveInfo' -> d_msg_SlaveInfo(Bin);
      'FrameworkID' -> d_msg_FrameworkID(Bin);
      'ExecutorID' -> d_msg_ExecutorID(Bin);
      'ExecutorInfo' -> d_msg_ExecutorInfo(Bin);
      'TaskID' -> d_msg_TaskID(Bin);
      'TaskInfo' -> d_msg_TaskInfo(Bin);
      'MasterInfo' -> d_msg_MasterInfo(Bin);
      'FrameworkInfo' -> d_msg_FrameworkInfo(Bin);
      'ResourceStatistics' -> d_msg_ResourceStatistics(Bin);
      'TaskStatus' -> d_msg_TaskStatus(Bin);
      'Filters' -> d_msg_Filters(Bin);
      'Parameter' -> d_msg_Parameter(Bin);
      'Parameters' -> d_msg_Parameters(Bin);
      'Credential' -> d_msg_Credential(Bin);
      'ResourceUsage' -> d_msg_ResourceUsage(Bin);
      'OfferID' -> d_msg_OfferID(Bin);
      'Offer' -> d_msg_Offer(Bin)
    end.



'd_enum_Value.Type'(0) -> 'SCALAR';
'd_enum_Value.Type'(1) -> 'RANGES';
'd_enum_Value.Type'(2) -> 'SET';
'd_enum_Value.Type'(3) -> 'TEXT'.

d_enum_TaskState(6) -> 'TASK_STAGING';
d_enum_TaskState(0) -> 'TASK_STARTING';
d_enum_TaskState(1) -> 'TASK_RUNNING';
d_enum_TaskState(2) -> 'TASK_FINISHED';
d_enum_TaskState(3) -> 'TASK_FAILED';
d_enum_TaskState(4) -> 'TASK_KILLED';
d_enum_TaskState(5) -> 'TASK_LOST'.

'd_msg_Environment.Variable'(Bin) ->
    'dfp_read_field_def_Environment.Variable'(Bin, 0, 0,
					      undefined, undefined).

'dfp_read_field_def_Environment.Variable'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Environment.Variable_name'(Rest, Z1, Z2, F1,
					F2);
'dfp_read_field_def_Environment.Variable'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Environment.Variable_value'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_Environment.Variable'(<<>>, 0, 0,
					  F1, F2) ->
    #'Environment.Variable'{name = F1, value = F2};
'dfp_read_field_def_Environment.Variable'(Other, Z1, Z2,
					  F1, F2) ->
    'dg_read_field_def_Environment.Variable'(Other, Z1, Z2,
					     F1, F2).

'dg_read_field_def_Environment.Variable'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Environment.Variable'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'dg_read_field_def_Environment.Variable'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Environment.Variable_name'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_Environment.Variable_value'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Environment.Variable'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Environment.Variable'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Environment.Variable'(Rest, 0, 0,
							     F1, F2);
	    5 -> 'skip_32_Environment.Variable'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Environment.Variable'(<<>>, 0, 0, F1,
					 F2) ->
    #'Environment.Variable'{name = F1, value = F2}.

'd_field_Environment.Variable_name'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Environment.Variable_name'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'd_field_Environment.Variable_name'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      NewFValue, F2).


'd_field_Environment.Variable_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Environment.Variable_value'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_Environment.Variable_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      F1, NewFValue).


'skip_varint_Environment.Variable'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'skip_varint_Environment.Variable'(Rest, Z1, Z2, F1,
				       F2);
'skip_varint_Environment.Variable'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


'skip_length_delimited_Environment.Variable'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Environment.Variable'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_Environment.Variable'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      F1, F2).


'skip_32_Environment.Variable'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


'skip_64_Environment.Variable'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


d_msg_Environment(Bin) ->
    dfp_read_field_def_Environment(Bin, 0, 0, []).

dfp_read_field_def_Environment(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_Environment_variables(Rest, Z1, Z2, F1);
dfp_read_field_def_Environment(<<>>, 0, 0, F1) ->
    #'Environment'{variables = lists:reverse(F1)};
dfp_read_field_def_Environment(Other, Z1, Z2, F1) ->
    dg_read_field_def_Environment(Other, Z1, Z2, F1).

dg_read_field_def_Environment(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Environment(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_Environment(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Environment_variables(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Environment(Rest, 0, 0, F1);
	    1 -> skip_64_Environment(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Environment(Rest, 0, 0, F1);
	    5 -> skip_32_Environment(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Environment(<<>>, 0, 0, F1) ->
    #'Environment'{variables = lists:reverse(F1)}.

d_field_Environment_variables(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_Environment_variables(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_Environment_variables(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Environment.Variable'),
    dfp_read_field_def_Environment(Rest2, 0, 0,
				   [NewFValue | F1]).


skip_varint_Environment(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_Environment(Rest, Z1, Z2, F1);
skip_varint_Environment(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


skip_length_delimited_Environment(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Environment(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_Environment(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Environment(Rest2, 0, 0, F1).


skip_32_Environment(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


skip_64_Environment(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


'd_msg_CommandInfo.URI'(Bin) ->
    'dfp_read_field_def_CommandInfo.URI'(Bin, 0, 0,
					 undefined, undefined).

'dfp_read_field_def_CommandInfo.URI'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'd_field_CommandInfo.URI_value'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_CommandInfo.URI'(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2) ->
    'd_field_CommandInfo.URI_executable'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_CommandInfo.URI'(<<>>, 0, 0, F1,
				     F2) ->
    #'CommandInfo.URI'{value = F1, executable = F2};
'dfp_read_field_def_CommandInfo.URI'(Other, Z1, Z2, F1,
				     F2) ->
    'dg_read_field_def_CommandInfo.URI'(Other, Z1, Z2, F1,
					F2).

'dg_read_field_def_CommandInfo.URI'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_CommandInfo.URI'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'dg_read_field_def_CommandInfo.URI'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_CommandInfo.URI_value'(Rest, 0, 0, F1, F2);
      16 ->
	  'd_field_CommandInfo.URI_executable'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_CommandInfo.URI'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_CommandInfo.URI'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_CommandInfo.URI'(Rest, 0, 0, F1,
							F2);
	    5 -> 'skip_32_CommandInfo.URI'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_CommandInfo.URI'(<<>>, 0, 0, F1,
				    F2) ->
    #'CommandInfo.URI'{value = F1, executable = F2}.

'd_field_CommandInfo.URI_value'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    'd_field_CommandInfo.URI_value'(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
'd_field_CommandInfo.URI_value'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_CommandInfo.URI'(Rest2, 0, 0,
					 NewFValue, F2).


'd_field_CommandInfo.URI_executable'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_CommandInfo.URI_executable'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_CommandInfo.URI_executable'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_CommandInfo.URI'(Rest, 0, 0, F1,
					 NewFValue).


'skip_varint_CommandInfo.URI'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    'skip_varint_CommandInfo.URI'(Rest, Z1, Z2, F1, F2);
'skip_varint_CommandInfo.URI'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2).


'skip_length_delimited_CommandInfo.URI'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_CommandInfo.URI'(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
'skip_length_delimited_CommandInfo.URI'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_CommandInfo.URI'(Rest2, 0, 0, F1,
					 F2).


'skip_32_CommandInfo.URI'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2).


'skip_64_CommandInfo.URI'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2).


d_msg_CommandInfo(Bin) ->
    dfp_read_field_def_CommandInfo(Bin, 0, 0, [], undefined,
				   undefined).

dfp_read_field_def_CommandInfo(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CommandInfo_uris(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_CommandInfo(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CommandInfo_environment(Rest, Z1, Z2, F1, F2,
				    F3);
dfp_read_field_def_CommandInfo(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_CommandInfo_value(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_CommandInfo(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'CommandInfo'{uris = lists:reverse(F1),
		   environment = F2, value = F3};
dfp_read_field_def_CommandInfo(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_CommandInfo(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_CommandInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_CommandInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_CommandInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_CommandInfo_uris(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_CommandInfo_environment(Rest, 0, 0, F1, F2, F3);
      26 -> d_field_CommandInfo_value(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CommandInfo(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_CommandInfo(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_CommandInfo(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_CommandInfo(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_CommandInfo(<<>>, 0, 0, F1, F2, F3) ->
    #'CommandInfo'{uris = lists:reverse(F1),
		   environment = F2, value = F3}.

d_field_CommandInfo_uris(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CommandInfo_uris(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3);
d_field_CommandInfo_uris(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CommandInfo.URI'),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0,
				   [NewFValue | F1], F2, F3).


d_field_CommandInfo_environment(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CommandInfo_environment(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
d_field_CommandInfo_environment(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Environment'),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1,
				   if F2 == undefined -> NewFValue;
				      true ->
					  merge_msg_Environment(F2, NewFValue)
				   end,
				   F3).


d_field_CommandInfo_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_CommandInfo_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_CommandInfo_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2,
				   NewFValue).


skip_varint_CommandInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_CommandInfo(Rest, Z1, Z2, F1, F2, F3);
skip_varint_CommandInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_CommandInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_CommandInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_CommandInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2, F3).


skip_32_CommandInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_CommandInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2,
				   F3).


'd_msg_Value.Text'(Bin) ->
    'dfp_read_field_def_Value.Text'(Bin, 0, 0, undefined).

'dfp_read_field_def_Value.Text'(<<10, Rest/binary>>, Z1,
				Z2, F1) ->
    'd_field_Value.Text_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Text'(<<>>, 0, 0, F1) ->
    #'Value.Text'{value = F1};
'dfp_read_field_def_Value.Text'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Text'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Text'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Text'(Rest, N + 7,
				   X bsl N + Acc, F1);
'dg_read_field_def_Value.Text'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Text_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Text'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Text'(Rest, 0, 0, F1);
	    2 -> 'skip_length_delimited_Value.Text'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Text'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Text'(<<>>, 0, 0, F1) ->
    #'Value.Text'{value = F1}.

'd_field_Value.Text_value'(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1)
    when N < 57 ->
    'd_field_Value.Text_value'(Rest, N + 7, X bsl N + Acc,
			       F1);
'd_field_Value.Text_value'(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Value.Text'(Rest2, 0, 0, NewFValue).


'skip_varint_Value.Text'(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    'skip_varint_Value.Text'(Rest, Z1, Z2, F1);
'skip_varint_Value.Text'(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Text'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Text'(Rest, N + 7,
				       X bsl N + Acc, F1);
'skip_length_delimited_Value.Text'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Text'(Rest2, 0, 0, F1).


'skip_32_Value.Text'(<<_:32, Rest/binary>>, Z1, Z2,
		     F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


'skip_64_Value.Text'(<<_:64, Rest/binary>>, Z1, Z2,
		     F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


'd_msg_Value.Set'(Bin) ->
    'dfp_read_field_def_Value.Set'(Bin, 0, 0, []).

'dfp_read_field_def_Value.Set'(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    'd_field_Value.Set_item'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Set'(<<>>, 0, 0, F1) ->
    #'Value.Set'{item = lists:reverse(F1)};
'dfp_read_field_def_Value.Set'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Set'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Set'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Set'(Rest, N + 7,
				  X bsl N + Acc, F1);
'dg_read_field_def_Value.Set'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Set_item'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Set'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Set'(Rest, 0, 0, F1);
	    2 -> 'skip_length_delimited_Value.Set'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Set'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Set'(<<>>, 0, 0, F1) ->
    #'Value.Set'{item = lists:reverse(F1)}.

'd_field_Value.Set_item'(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 57 ->
    'd_field_Value.Set_item'(Rest, N + 7, X bsl N + Acc,
			     F1);
'd_field_Value.Set_item'(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Value.Set'(Rest2, 0, 0,
				   [NewFValue | F1]).


'skip_varint_Value.Set'(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    'skip_varint_Value.Set'(Rest, Z1, Z2, F1);
'skip_varint_Value.Set'(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Set'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Set'(Rest, N + 7,
				      X bsl N + Acc, F1);
'skip_length_delimited_Value.Set'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Set'(Rest2, 0, 0, F1).


'skip_32_Value.Set'(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'skip_64_Value.Set'(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'd_msg_Value.Range'(Bin) ->
    'dfp_read_field_def_Value.Range'(Bin, 0, 0, undefined,
				     undefined).

'dfp_read_field_def_Value.Range'(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2) ->
    'd_field_Value.Range_begin'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Value.Range'(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'd_field_Value.Range_end'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Value.Range'(<<>>, 0, 0, F1, F2) ->
    #'Value.Range'{'begin' = F1, 'end' = F2};
'dfp_read_field_def_Value.Range'(Other, Z1, Z2, F1,
				 F2) ->
    'dg_read_field_def_Value.Range'(Other, Z1, Z2, F1, F2).

'dg_read_field_def_Value.Range'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Range'(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
'dg_read_field_def_Value.Range'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> 'd_field_Value.Range_begin'(Rest, 0, 0, F1, F2);
      16 -> 'd_field_Value.Range_end'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Range'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Value.Range'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Value.Range'(Rest, 0, 0, F1, F2);
	    5 -> 'skip_32_Value.Range'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Value.Range'(<<>>, 0, 0, F1, F2) ->
    #'Value.Range'{'begin' = F1, 'end' = F2}.

'd_field_Value.Range_begin'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Value.Range_begin'(Rest, N + 7, X bsl N + Acc,
				F1, F2);
'd_field_Value.Range_begin'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Value.Range'(Rest, 0, 0, NewFValue,
				     F2).


'd_field_Value.Range_end'(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    'd_field_Value.Range_end'(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
'd_field_Value.Range_end'(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Value.Range'(Rest, 0, 0, F1,
				     NewFValue).


'skip_varint_Value.Range'(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    'skip_varint_Value.Range'(Rest, Z1, Z2, F1, F2);
'skip_varint_Value.Range'(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'skip_length_delimited_Value.Range'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Value.Range'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'skip_length_delimited_Value.Range'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Range'(Rest2, 0, 0, F1, F2).


'skip_32_Value.Range'(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'skip_64_Value.Range'(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'd_msg_Value.Ranges'(Bin) ->
    'dfp_read_field_def_Value.Ranges'(Bin, 0, 0, []).

'dfp_read_field_def_Value.Ranges'(<<10, Rest/binary>>,
				  Z1, Z2, F1) ->
    'd_field_Value.Ranges_range'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Ranges'(<<>>, 0, 0, F1) ->
    #'Value.Ranges'{range = lists:reverse(F1)};
'dfp_read_field_def_Value.Ranges'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Ranges'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Ranges'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Ranges'(Rest, N + 7,
				     X bsl N + Acc, F1);
'dg_read_field_def_Value.Ranges'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Ranges_range'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Ranges'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Ranges'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Value.Ranges'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Ranges'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Ranges'(<<>>, 0, 0, F1) ->
    #'Value.Ranges'{range = lists:reverse(F1)}.

'd_field_Value.Ranges_range'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    'd_field_Value.Ranges_range'(Rest, N + 7, X bsl N + Acc,
				 F1);
'd_field_Value.Ranges_range'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Range'),
    'dfp_read_field_def_Value.Ranges'(Rest2, 0, 0,
				      [NewFValue | F1]).


'skip_varint_Value.Ranges'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'skip_varint_Value.Ranges'(Rest, Z1, Z2, F1);
'skip_varint_Value.Ranges'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Ranges'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Ranges'(Rest, N + 7,
					 X bsl N + Acc, F1);
'skip_length_delimited_Value.Ranges'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Ranges'(Rest2, 0, 0, F1).


'skip_32_Value.Ranges'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'skip_64_Value.Ranges'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'd_msg_Value.Scalar'(Bin) ->
    'dfp_read_field_def_Value.Scalar'(Bin, 0, 0, undefined).

'dfp_read_field_def_Value.Scalar'(<<9, Rest/binary>>,
				  Z1, Z2, F1) ->
    'd_field_Value.Scalar_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Scalar'(<<>>, 0, 0, F1) ->
    #'Value.Scalar'{value = F1};
'dfp_read_field_def_Value.Scalar'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Scalar'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Scalar'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Scalar'(Rest, N + 7,
				     X bsl N + Acc, F1);
'dg_read_field_def_Value.Scalar'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> 'd_field_Value.Scalar_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Scalar'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Scalar'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Value.Scalar'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Scalar'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Scalar'(<<>>, 0, 0, F1) ->
    #'Value.Scalar'{value = F1}.

'd_field_Value.Scalar_value'(<<Value:64/little-float,
			       Rest/binary>>,
			     Z1, Z2, _) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, Value).


'skip_varint_Value.Scalar'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'skip_varint_Value.Scalar'(Rest, Z1, Z2, F1);
'skip_varint_Value.Scalar'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Scalar'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Scalar'(Rest, N + 7,
					 X bsl N + Acc, F1);
'skip_length_delimited_Value.Scalar'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Scalar'(Rest2, 0, 0, F1).


'skip_32_Value.Scalar'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


'skip_64_Value.Scalar'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


d_msg_Value(Bin) ->
    dfp_read_field_def_Value(Bin, 0, 0, undefined,
			     undefined, undefined, undefined, undefined).

dfp_read_field_def_Value(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4, F5) ->
    d_field_Value_type(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_scalar(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_ranges(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_set(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<42, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_text(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<>>, 0, 0, F1, F2, F3, F4,
			 F5) ->
    #'Value'{type = F1, scalar = F2, ranges = F3, set = F4,
	     text = F5};
dfp_read_field_def_Value(Other, Z1, Z2, F1, F2, F3, F4,
			 F5) ->
    dg_read_field_def_Value(Other, Z1, Z2, F1, F2, F3, F4,
			    F5).

dg_read_field_def_Value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_Value(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
dg_read_field_def_Value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Value_type(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 ->
	  d_field_Value_scalar(Rest, 0, 0, F1, F2, F3, F4, F5);
      26 ->
	  d_field_Value_ranges(Rest, 0, 0, F1, F2, F3, F4, F5);
      34 -> d_field_Value_set(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_Value_text(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Value(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_Value(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_Value(Rest, 0, 0, F1, F2, F3, F4,
					    F5);
	    5 -> skip_32_Value(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_Value(<<>>, 0, 0, F1, F2, F3, F4,
			F5) ->
    #'Value'{type = F1, scalar = F2, ranges = F3, set = F4,
	     text = F5}.

d_field_Value_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5);
d_field_Value_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Value(Rest, 0, 0, NewFValue, F2, F3,
			     F4, F5).


d_field_Value_scalar(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_scalar(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_Value_scalar(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Scalar'),
    dfp_read_field_def_Value(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Scalar'(F2, NewFValue)
			     end,
			     F3, F4, F5).


d_field_Value_ranges(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_ranges(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_Value_ranges(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Ranges'),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2,
			     if F3 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Ranges'(F3, NewFValue)
			     end,
			     F4, F5).


d_field_Value_set(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_set(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5);
d_field_Value_set(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Set'),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3,
			     if F4 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Set'(F4, NewFValue)
			     end,
			     F5).


d_field_Value_text(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_text(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5);
d_field_Value_text(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Text'),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3, F4,
			     if F5 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Text'(F5, NewFValue)
			     end).


skip_varint_Value(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5) ->
    skip_varint_Value(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_Value(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


skip_length_delimited_Value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_Value(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
skip_length_delimited_Value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3, F4,
			     F5).


skip_32_Value(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


skip_64_Value(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


d_msg_Resource(Bin) ->
    dfp_read_field_def_Resource(Bin, 0, 0, undefined,
				undefined, undefined, undefined, undefined,
				undefined).

dfp_read_field_def_Resource(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
dfp_read_field_def_Resource(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
dfp_read_field_def_Resource(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_scalar(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6);
dfp_read_field_def_Resource(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_ranges(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6);
dfp_read_field_def_Resource(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_set(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6);
dfp_read_field_def_Resource(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6) ->
    d_field_Resource_role(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
dfp_read_field_def_Resource(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6) ->
    #'Resource'{name = F1, type = F2, scalar = F3,
		ranges = F4, set = F5, role = F6};
dfp_read_field_def_Resource(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6) ->
    dg_read_field_def_Resource(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6).

dg_read_field_def_Resource(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_Resource(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6);
dg_read_field_def_Resource(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Resource_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6);
      16 ->
	  d_field_Resource_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6);
      26 ->
	  d_field_Resource_scalar(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6);
      34 ->
	  d_field_Resource_ranges(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6);
      42 ->
	  d_field_Resource_set(Rest, 0, 0, F1, F2, F3, F4, F5,
			       F6);
      50 ->
	  d_field_Resource_role(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Resource(Rest, 0, 0, F1, F2, F3, F4, F5,
				     F6);
	    1 ->
		skip_64_Resource(Rest, 0, 0, F1, F2, F3, F4, F5, F6);
	    2 ->
		skip_length_delimited_Resource(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6);
	    5 ->
		skip_32_Resource(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_Resource(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6) ->
    #'Resource'{name = F1, type = F2, scalar = F3,
		ranges = F4, set = F5, role = F6}.

d_field_Resource_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6);
d_field_Resource_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Resource(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6).


d_field_Resource_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6);
d_field_Resource_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Resource(Rest, 0, 0, F1, NewFValue,
				F3, F4, F5, F6).


d_field_Resource_scalar(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_scalar(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6);
d_field_Resource_scalar(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Scalar'),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Value.Scalar'(F3, NewFValue)
				end,
				F4, F5, F6).


d_field_Resource_ranges(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_ranges(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6);
d_field_Resource_ranges(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Ranges'),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3,
				if F4 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Value.Ranges'(F4, NewFValue)
				end,
				F5, F6).


d_field_Resource_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_set(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6);
d_field_Resource_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Set'),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				if F5 == undefined -> NewFValue;
				   true -> 'merge_msg_Value.Set'(F5, NewFValue)
				end,
				F6).


d_field_Resource_role(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Resource_role(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6);
d_field_Resource_role(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, NewFValue).


skip_varint_Resource(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6) ->
    skip_varint_Resource(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6);
skip_varint_Resource(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6).


skip_length_delimited_Resource(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_Resource(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_Resource(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6).


skip_32_Resource(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6).


skip_64_Resource(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6).


d_msg_SlaveID(Bin) ->
    dfp_read_field_def_SlaveID(Bin, 0, 0, undefined).

dfp_read_field_def_SlaveID(<<10, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_SlaveID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_SlaveID(<<>>, 0, 0, F1) ->
    #'SlaveID'{value = F1};
dfp_read_field_def_SlaveID(Other, Z1, Z2, F1) ->
    dg_read_field_def_SlaveID(Other, Z1, Z2, F1).

dg_read_field_def_SlaveID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_SlaveID(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_SlaveID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_SlaveID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_SlaveID(Rest, 0, 0, F1);
	    1 -> skip_64_SlaveID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_SlaveID(Rest, 0, 0, F1);
	    5 -> skip_32_SlaveID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_SlaveID(<<>>, 0, 0, F1) ->
    #'SlaveID'{value = F1}.

d_field_SlaveID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1)
    when N < 57 ->
    d_field_SlaveID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_SlaveID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SlaveID(Rest2, 0, 0, NewFValue).


skip_varint_SlaveID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_SlaveID(Rest, Z1, Z2, F1);
skip_varint_SlaveID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_SlaveID(Rest, Z1, Z2, F1).


skip_length_delimited_SlaveID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_SlaveID(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_SlaveID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SlaveID(Rest2, 0, 0, F1).


skip_32_SlaveID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_SlaveID(Rest, Z1, Z2, F1).


skip_64_SlaveID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_SlaveID(Rest, Z1, Z2, F1).


d_msg_Request(Bin) ->
    dfp_read_field_def_Request(Bin, 0, 0, undefined, []).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Request_slave_id(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Request_resources(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Request(<<>>, 0, 0, F1, F2) ->
    #'Request'{slave_id = F1,
	       resources = lists:reverse(F2)};
dfp_read_field_def_Request(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Request(Other, Z1, Z2, F1, F2).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Request_slave_id(Rest, 0, 0, F1, F2);
      18 -> d_field_Request_resources(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Request(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Request(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Request(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F1, F2) ->
    #'Request'{slave_id = F1,
	       resources = lists:reverse(F2)}.

d_field_Request_slave_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2)
    when N < 57 ->
    d_field_Request_slave_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2);
d_field_Request_slave_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       if F1 == undefined -> NewFValue;
				  true -> merge_msg_SlaveID(F1, NewFValue)
			       end,
			       F2).


d_field_Request_resources(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    d_field_Request_resources(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
d_field_Request_resources(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Resource'),
    dfp_read_field_def_Request(Rest2, 0, 0, F1,
			       [NewFValue | F2]).


skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    skip_varint_Request(Rest, Z1, Z2, F1, F2);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F1, F2).


skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


d_msg_Attribute(Bin) ->
    dfp_read_field_def_Attribute(Bin, 0, 0, undefined,
				 undefined, undefined, undefined, undefined,
				 undefined).

dfp_read_field_def_Attribute(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_scalar(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_Attribute(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_ranges(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_Attribute(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_set(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
dfp_read_field_def_Attribute(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_text(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6) ->
    #'Attribute'{name = F1, type = F2, scalar = F3,
		 ranges = F4, set = F5, text = F6};
dfp_read_field_def_Attribute(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6) ->
    dg_read_field_def_Attribute(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6).

dg_read_field_def_Attribute(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_Attribute(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6);
dg_read_field_def_Attribute(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Attribute_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      16 ->
	  d_field_Attribute_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      26 ->
	  d_field_Attribute_scalar(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      34 ->
	  d_field_Attribute_ranges(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      50 ->
	  d_field_Attribute_set(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6);
      42 ->
	  d_field_Attribute_text(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6);
	    1 ->
		skip_64_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5, F6);
	    2 ->
		skip_length_delimited_Attribute(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6);
	    5 ->
		skip_32_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_Attribute(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6) ->
    #'Attribute'{name = F1, type = F2, scalar = F3,
		 ranges = F4, set = F5, text = F6}.

d_field_Attribute_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Attribute(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6).


d_field_Attribute_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Attribute(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6).


d_field_Attribute_scalar(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_scalar(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_Attribute_scalar(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Scalar'),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2,
				 if F3 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Scalar'(F3, NewFValue)
				 end,
				 F4, F5, F6).


d_field_Attribute_ranges(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_ranges(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_Attribute_ranges(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Ranges'),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 if F4 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Ranges'(F4, NewFValue)
				 end,
				 F5, F6).


d_field_Attribute_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_set(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6);
d_field_Attribute_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Set'),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4,
				 if F5 == undefined -> NewFValue;
				    true -> 'merge_msg_Value.Set'(F5, NewFValue)
				 end,
				 F6).


d_field_Attribute_text(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_text(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_text(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Value.Text'),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4, F5,
				 if F6 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Text'(F6, NewFValue)
				 end).


skip_varint_Attribute(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6) ->
    skip_varint_Attribute(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
skip_varint_Attribute(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


skip_length_delimited_Attribute(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_Attribute(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_Attribute(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6).


skip_32_Attribute(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


skip_64_Attribute(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


d_msg_SlaveInfo(Bin) ->
    dfp_read_field_def_SlaveInfo(Bin, 0, 0, undefined,
				 undefined, [], [], undefined, undefined,
				 undefined, undefined).

dfp_read_field_def_SlaveInfo(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_hostname(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_port(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_resources(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_attributes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<56, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_checkpoint(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_webui_hostname(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_SlaveInfo_webui_port(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8);
dfp_read_field_def_SlaveInfo(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8) ->
    #'SlaveInfo'{hostname = F1, port = F2,
		 resources = lists:reverse(F3),
		 attributes = lists:reverse(F4), id = F5,
		 checkpoint = F6, webui_hostname = F7, webui_port = F8};
dfp_read_field_def_SlaveInfo(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8) ->
    dg_read_field_def_SlaveInfo(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8).

dg_read_field_def_SlaveInfo(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 32 - 7 ->
    dg_read_field_def_SlaveInfo(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8);
dg_read_field_def_SlaveInfo(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SlaveInfo_hostname(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8);
      64 ->
	  d_field_SlaveInfo_port(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8);
      26 ->
	  d_field_SlaveInfo_resources(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8);
      42 ->
	  d_field_SlaveInfo_attributes(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8);
      50 ->
	  d_field_SlaveInfo_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8);
      56 ->
	  d_field_SlaveInfo_checkpoint(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8);
      18 ->
	  d_field_SlaveInfo_webui_hostname(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8);
      32 ->
	  d_field_SlaveInfo_webui_port(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SlaveInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8);
	    1 ->
		skip_64_SlaveInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8);
	    2 ->
		skip_length_delimited_SlaveInfo(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8);
	    5 ->
		skip_32_SlaveInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8)
	  end
    end;
dg_read_field_def_SlaveInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8) ->
    #'SlaveInfo'{hostname = F1, port = F2,
		 resources = lists:reverse(F3),
		 attributes = lists:reverse(F4), id = F5,
		 checkpoint = F6, webui_hostname = F7, webui_port = F8}.

d_field_SlaveInfo_hostname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_hostname(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_hostname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8).


d_field_SlaveInfo_port(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_port(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_port(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6, F7, F8) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_SlaveInfo(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8).


d_field_SlaveInfo_resources(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_resources(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_resources(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Resource'),
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, F1, F2,
				 [NewFValue | F3], F4, F5, F6, F7, F8).


d_field_SlaveInfo_attributes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_attributes(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_attributes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Attribute'),
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, F1, F2, F3,
				 [NewFValue | F4], F5, F6, F7, F8).


d_field_SlaveInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, F1, F2, F3,
				 F4,
				 if F5 == undefined -> NewFValue;
				    true -> merge_msg_SlaveID(F5, NewFValue)
				 end,
				 F6, F7, F8).


d_field_SlaveInfo_checkpoint(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_checkpoint(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_checkpoint(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, _, F7, F8) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_SlaveInfo(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8).


d_field_SlaveInfo_webui_hostname(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_webui_hostname(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8);
d_field_SlaveInfo_webui_hostname(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, _, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, NewFValue, F8).


d_field_SlaveInfo_webui_port(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_SlaveInfo_webui_port(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8);
d_field_SlaveInfo_webui_port(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_SlaveInfo(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue).


skip_varint_SlaveInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8) ->
    skip_varint_SlaveInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8);
skip_varint_SlaveInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_SlaveInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8).


skip_length_delimited_SlaveInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    skip_length_delimited_SlaveInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8);
skip_length_delimited_SlaveInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SlaveInfo(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8).


skip_32_SlaveInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_SlaveInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8).


skip_64_SlaveInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_SlaveInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8).


d_msg_FrameworkID(Bin) ->
    dfp_read_field_def_FrameworkID(Bin, 0, 0, undefined).

dfp_read_field_def_FrameworkID(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_FrameworkID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_FrameworkID(<<>>, 0, 0, F1) ->
    #'FrameworkID'{value = F1};
dfp_read_field_def_FrameworkID(Other, Z1, Z2, F1) ->
    dg_read_field_def_FrameworkID(Other, Z1, Z2, F1).

dg_read_field_def_FrameworkID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_FrameworkID(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_FrameworkID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_FrameworkID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_FrameworkID(Rest, 0, 0, F1);
	    1 -> skip_64_FrameworkID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_FrameworkID(Rest, 0, 0, F1);
	    5 -> skip_32_FrameworkID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_FrameworkID(<<>>, 0, 0, F1) ->
    #'FrameworkID'{value = F1}.

d_field_FrameworkID_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 57 ->
    d_field_FrameworkID_value(Rest, N + 7, X bsl N + Acc,
			      F1);
d_field_FrameworkID_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkID(Rest2, 0, 0, NewFValue).


skip_varint_FrameworkID(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_FrameworkID(Rest, Z1, Z2, F1);
skip_varint_FrameworkID(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


skip_length_delimited_FrameworkID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_FrameworkID(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_FrameworkID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FrameworkID(Rest2, 0, 0, F1).


skip_32_FrameworkID(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


skip_64_FrameworkID(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


d_msg_ExecutorID(Bin) ->
    dfp_read_field_def_ExecutorID(Bin, 0, 0, undefined).

dfp_read_field_def_ExecutorID(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_ExecutorID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_ExecutorID(<<>>, 0, 0, F1) ->
    #'ExecutorID'{value = F1};
dfp_read_field_def_ExecutorID(Other, Z1, Z2, F1) ->
    dg_read_field_def_ExecutorID(Other, Z1, Z2, F1).

dg_read_field_def_ExecutorID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ExecutorID(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_ExecutorID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ExecutorID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ExecutorID(Rest, 0, 0, F1);
	    1 -> skip_64_ExecutorID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_ExecutorID(Rest, 0, 0, F1);
	    5 -> skip_32_ExecutorID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ExecutorID(<<>>, 0, 0, F1) ->
    #'ExecutorID'{value = F1}.

d_field_ExecutorID_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 57 ->
    d_field_ExecutorID_value(Rest, N + 7, X bsl N + Acc,
			     F1);
d_field_ExecutorID_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorID(Rest2, 0, 0, NewFValue).


skip_varint_ExecutorID(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_ExecutorID(Rest, Z1, Z2, F1);
skip_varint_ExecutorID(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


skip_length_delimited_ExecutorID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ExecutorID(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_ExecutorID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExecutorID(Rest2, 0, 0, F1).


skip_32_ExecutorID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


skip_64_ExecutorID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


d_msg_ExecutorInfo(Bin) ->
    dfp_read_field_def_ExecutorInfo(Bin, 0, 0, undefined,
				    undefined, undefined, [], undefined,
				    undefined, undefined).

dfp_read_field_def_ExecutorInfo(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_executor_id(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<66, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_framework_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<58, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_command(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_resources(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<74, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_name(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<82, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_source(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_ExecutorInfo_data(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_ExecutorInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7) ->
    #'ExecutorInfo'{executor_id = F1, framework_id = F2,
		    command = F3, resources = lists:reverse(F4), name = F5,
		    source = F6, data = F7};
dfp_read_field_def_ExecutorInfo(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7) ->
    dg_read_field_def_ExecutorInfo(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7).

dg_read_field_def_ExecutorInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_ExecutorInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_ExecutorInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ExecutorInfo_executor_id(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      66 ->
	  d_field_ExecutorInfo_framework_id(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      58 ->
	  d_field_ExecutorInfo_command(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7);
      42 ->
	  d_field_ExecutorInfo_resources(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      74 ->
	  d_field_ExecutorInfo_name(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      82 ->
	  d_field_ExecutorInfo_source(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      34 ->
	  d_field_ExecutorInfo_data(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7);
	    1 ->
		skip_64_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7);
	    2 ->
		skip_length_delimited_ExecutorInfo(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7);
	    5 ->
		skip_32_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7)
	  end
    end;
dg_read_field_def_ExecutorInfo(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7) ->
    #'ExecutorInfo'{executor_id = F1, framework_id = F2,
		    command = F3, resources = lists:reverse(F4), name = F5,
		    source = F6, data = F7}.

d_field_ExecutorInfo_executor_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_executor_id(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_executor_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ExecutorID'),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0,
				    if F1 == undefined -> NewFValue;
				       true ->
					   merge_msg_ExecutorID(F1, NewFValue)
				    end,
				    F2, F3, F4, F5, F6, F7).


d_field_ExecutorInfo_framework_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_framework_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
d_field_ExecutorInfo_framework_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FrameworkID'),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_FrameworkID(F2, NewFValue)
				    end,
				    F3, F4, F5, F6, F7).


d_field_ExecutorInfo_command(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_command(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_command(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CommandInfo'),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true ->
					   merge_msg_CommandInfo(F3, NewFValue)
				    end,
				    F4, F5, F6, F7).


d_field_ExecutorInfo_resources(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_resources(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_resources(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Resource'),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    [NewFValue | F4], F5, F6, F7).


d_field_ExecutorInfo_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_name(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7).


d_field_ExecutorInfo_source(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_source(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_source(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7).


d_field_ExecutorInfo_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_ExecutorInfo_data(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_ExecutorInfo_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue).


skip_varint_ExecutorInfo(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_ExecutorInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
skip_varint_ExecutorInfo(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


skip_length_delimited_ExecutorInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_ExecutorInfo(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7);
skip_length_delimited_ExecutorInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7).


skip_32_ExecutorInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


skip_64_ExecutorInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).


d_msg_TaskID(Bin) ->
    dfp_read_field_def_TaskID(Bin, 0, 0, undefined).

dfp_read_field_def_TaskID(<<10, Rest/binary>>, Z1, Z2,
			  F1) ->
    d_field_TaskID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_TaskID(<<>>, 0, 0, F1) ->
    #'TaskID'{value = F1};
dfp_read_field_def_TaskID(Other, Z1, Z2, F1) ->
    dg_read_field_def_TaskID(Other, Z1, Z2, F1).

dg_read_field_def_TaskID(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_TaskID(Rest, N + 7, X bsl N + Acc,
			     F1);
dg_read_field_def_TaskID(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_TaskID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_TaskID(Rest, 0, 0, F1);
	    1 -> skip_64_TaskID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_TaskID(Rest, 0, 0, F1);
	    5 -> skip_32_TaskID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_TaskID(<<>>, 0, 0, F1) ->
    #'TaskID'{value = F1}.

d_field_TaskID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1)
    when N < 57 ->
    d_field_TaskID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_TaskID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskID(Rest2, 0, 0, NewFValue).


skip_varint_TaskID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    skip_varint_TaskID(Rest, Z1, Z2, F1);
skip_varint_TaskID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


skip_length_delimited_TaskID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_TaskID(Rest, N + 7, X bsl N + Acc,
				 F1);
skip_length_delimited_TaskID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskID(Rest2, 0, 0, F1).


skip_32_TaskID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


skip_64_TaskID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


d_msg_TaskInfo(Bin) ->
    dfp_read_field_def_TaskInfo(Bin, 0, 0, undefined,
				undefined, undefined, [], undefined, undefined,
				undefined).

dfp_read_field_def_TaskInfo(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_TaskInfo(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_task_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_TaskInfo(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_slave_id(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_TaskInfo(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_resources(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_TaskInfo(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_executor(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
dfp_read_field_def_TaskInfo(<<58, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_command(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_TaskInfo(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_TaskInfo_data(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_TaskInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7) ->
    #'TaskInfo'{name = F1, task_id = F2, slave_id = F3,
		resources = lists:reverse(F4), executor = F5,
		command = F6, data = F7};
dfp_read_field_def_TaskInfo(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7) ->
    dg_read_field_def_TaskInfo(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7).

dg_read_field_def_TaskInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_TaskInfo(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_TaskInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TaskInfo_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      18 ->
	  d_field_TaskInfo_task_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      26 ->
	  d_field_TaskInfo_slave_id(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      34 ->
	  d_field_TaskInfo_resources(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      42 ->
	  d_field_TaskInfo_executor(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7);
      58 ->
	  d_field_TaskInfo_command(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      50 ->
	  d_field_TaskInfo_data(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7);
	    1 ->
		skip_64_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				 F7);
	    2 ->
		skip_length_delimited_TaskInfo(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7);
	    5 ->
		skip_32_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7)
	  end
    end;
dg_read_field_def_TaskInfo(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7) ->
    #'TaskInfo'{name = F1, task_id = F2, slave_id = F3,
		resources = lists:reverse(F4), executor = F5,
		command = F6, data = F7}.

d_field_TaskInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7).


d_field_TaskInfo_task_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_task_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_task_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'TaskID'),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1,
				if F2 == undefined -> NewFValue;
				   true -> merge_msg_TaskID(F2, NewFValue)
				end,
				F3, F4, F5, F6, F7).


d_field_TaskInfo_slave_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_slave_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_slave_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true -> merge_msg_SlaveID(F3, NewFValue)
				end,
				F4, F5, F6, F7).


d_field_TaskInfo_resources(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_resources(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_resources(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Resource'),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3,
				[NewFValue | F4], F5, F6, F7).


d_field_TaskInfo_executor(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_executor(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_executor(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ExecutorInfo'),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				if F5 == undefined -> NewFValue;
				   true -> merge_msg_ExecutorInfo(F5, NewFValue)
				end,
				F6, F7).


d_field_TaskInfo_command(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_command(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_command(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'CommandInfo'),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5,
				if F6 == undefined -> NewFValue;
				   true -> merge_msg_CommandInfo(F6, NewFValue)
				end,
				F7).


d_field_TaskInfo_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_TaskInfo_data(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_TaskInfo_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, NewFValue).


skip_varint_TaskInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_TaskInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7);
skip_varint_TaskInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


skip_length_delimited_TaskInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_TaskInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
skip_length_delimited_TaskInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7).


skip_32_TaskInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


skip_64_TaskInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


d_msg_MasterInfo(Bin) ->
    dfp_read_field_def_MasterInfo(Bin, 0, 0, undefined,
				  undefined, undefined).

dfp_read_field_def_MasterInfo(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_MasterInfo_id(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_MasterInfo(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_MasterInfo_ip(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_MasterInfo(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_MasterInfo_port(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_MasterInfo(<<>>, 0, 0, F1, F2, F3) ->
    #'MasterInfo'{id = F1, ip = F2, port = F3};
dfp_read_field_def_MasterInfo(Other, Z1, Z2, F1, F2,
			      F3) ->
    dg_read_field_def_MasterInfo(Other, Z1, Z2, F1, F2, F3).

dg_read_field_def_MasterInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_MasterInfo(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
dg_read_field_def_MasterInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_MasterInfo_id(Rest, 0, 0, F1, F2, F3);
      16 -> d_field_MasterInfo_ip(Rest, 0, 0, F1, F2, F3);
      24 -> d_field_MasterInfo_port(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_MasterInfo(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_MasterInfo(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_MasterInfo(Rest, 0, 0, F1, F2,
						 F3);
	    5 -> skip_32_MasterInfo(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_MasterInfo(<<>>, 0, 0, F1, F2, F3) ->
    #'MasterInfo'{id = F1, ip = F2, port = F3}.

d_field_MasterInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3)
    when N < 57 ->
    d_field_MasterInfo_id(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3);
d_field_MasterInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, NewFValue,
				  F2, F3).


d_field_MasterInfo_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3)
    when N < 57 ->
    d_field_MasterInfo_ip(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3);
d_field_MasterInfo_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_MasterInfo(Rest, 0, 0, F1, NewFValue,
				  F3).


d_field_MasterInfo_port(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MasterInfo_port(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3);
d_field_MasterInfo_port(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_MasterInfo(Rest, 0, 0, F1, F2,
				  NewFValue).


skip_varint_MasterInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3) ->
    skip_varint_MasterInfo(Rest, Z1, Z2, F1, F2, F3);
skip_varint_MasterInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3).


skip_length_delimited_MasterInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_MasterInfo(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
skip_length_delimited_MasterInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3).


skip_32_MasterInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3).


skip_64_MasterInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3).


d_msg_FrameworkInfo(Bin) ->
    dfp_read_field_def_FrameworkInfo(Bin, 0, 0, undefined,
				     undefined, undefined, undefined, undefined,
				     undefined).

dfp_read_field_def_FrameworkInfo(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_user(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6);
dfp_read_field_def_FrameworkInfo(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_name(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6);
dfp_read_field_def_FrameworkInfo(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_FrameworkInfo(<<33, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_failover_timeout(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6);
dfp_read_field_def_FrameworkInfo(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_checkpoint(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
dfp_read_field_def_FrameworkInfo(<<50, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_FrameworkInfo_role(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6);
dfp_read_field_def_FrameworkInfo(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6) ->
    #'FrameworkInfo'{user = F1, name = F2, id = F3,
		     failover_timeout = F4, checkpoint = F5, role = F6};
dfp_read_field_def_FrameworkInfo(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6) ->
    dg_read_field_def_FrameworkInfo(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).

dg_read_field_def_FrameworkInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_FrameworkInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_FrameworkInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FrameworkInfo_user(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6);
      18 ->
	  d_field_FrameworkInfo_name(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6);
      26 ->
	  d_field_FrameworkInfo_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      33 ->
	  d_field_FrameworkInfo_failover_timeout(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6);
      40 ->
	  d_field_FrameworkInfo_checkpoint(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6);
      50 ->
	  d_field_FrameworkInfo_role(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6);
	    1 ->
		skip_64_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6);
	    2 ->
		skip_length_delimited_FrameworkInfo(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6);
	    5 ->
		skip_32_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6)
	  end
    end;
dg_read_field_def_FrameworkInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6) ->
    #'FrameworkInfo'{user = F1, name = F2, id = F3,
		     failover_timeout = F4, checkpoint = F5, role = F6}.

d_field_FrameworkInfo_user(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_FrameworkInfo_user(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6);
d_field_FrameworkInfo_user(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6).


d_field_FrameworkInfo_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_FrameworkInfo_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6);
d_field_FrameworkInfo_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6).


d_field_FrameworkInfo_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_FrameworkInfo_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_FrameworkInfo_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FrameworkID'),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     if F3 == undefined -> NewFValue;
					true ->
					    merge_msg_FrameworkID(F3, NewFValue)
				     end,
				     F4, F5, F6).


d_field_FrameworkInfo_failover_timeout(<<Value:64/little-float,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, _, F5, F6) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, Value, F5, F6).


d_field_FrameworkInfo_checkpoint(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_FrameworkInfo_checkpoint(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_FrameworkInfo_checkpoint(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FrameworkInfo(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6).


d_field_FrameworkInfo_role(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_FrameworkInfo_role(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6);
d_field_FrameworkInfo_role(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, NewFValue).


skip_varint_FrameworkInfo(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_FrameworkInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
skip_varint_FrameworkInfo(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_length_delimited_FrameworkInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_FrameworkInfo(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_FrameworkInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6).


skip_32_FrameworkInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_64_FrameworkInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


d_msg_ResourceStatistics(Bin) ->
    dfp_read_field_def_ResourceStatistics(Bin, 0, 0,
					  undefined, undefined, undefined,
					  undefined, undefined, undefined,
					  undefined, undefined, undefined,
					  undefined, undefined, undefined).

dfp_read_field_def_ResourceStatistics(<<9,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_timestamp(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12);
dfp_read_field_def_ResourceStatistics(<<17,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_user_time_secs(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<25,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_system_time_secs(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12);
dfp_read_field_def_ResourceStatistics(<<33,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_limit(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12);
dfp_read_field_def_ResourceStatistics(<<56,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_nr_periods(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_nr_throttled(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<73,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_cpus_throttled_time_secs(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12);
dfp_read_field_def_ResourceStatistics(<<40,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_mem_rss_bytes(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<48,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_mem_limit_bytes(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<80,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_mem_file_bytes(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<88,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_mem_anon_bytes(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12);
dfp_read_field_def_ResourceStatistics(<<96,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12) ->
    d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12);
dfp_read_field_def_ResourceStatistics(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12) ->
    #'ResourceStatistics'{timestamp = F1,
			  cpus_user_time_secs = F2, cpus_system_time_secs = F3,
			  cpus_limit = F4, cpus_nr_periods = F5,
			  cpus_nr_throttled = F6, cpus_throttled_time_secs = F7,
			  mem_rss_bytes = F8, mem_limit_bytes = F9,
			  mem_file_bytes = F10, mem_anon_bytes = F11,
			  mem_mapped_file_bytes = F12};
dfp_read_field_def_ResourceStatistics(Other, Z1, Z2, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12) ->
    dg_read_field_def_ResourceStatistics(Other, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12).

dg_read_field_def_ResourceStatistics(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12)
    when N < 32 - 7 ->
    dg_read_field_def_ResourceStatistics(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12);
dg_read_field_def_ResourceStatistics(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_ResourceStatistics_timestamp(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12);
      17 ->
	  d_field_ResourceStatistics_cpus_user_time_secs(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12);
      25 ->
	  d_field_ResourceStatistics_cpus_system_time_secs(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12);
      33 ->
	  d_field_ResourceStatistics_cpus_limit(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12);
      56 ->
	  d_field_ResourceStatistics_cpus_nr_periods(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12);
      64 ->
	  d_field_ResourceStatistics_cpus_nr_throttled(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12);
      73 ->
	  d_field_ResourceStatistics_cpus_throttled_time_secs(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12);
      40 ->
	  d_field_ResourceStatistics_mem_rss_bytes(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12);
      48 ->
	  d_field_ResourceStatistics_mem_limit_bytes(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12);
      80 ->
	  d_field_ResourceStatistics_mem_file_bytes(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12);
      88 ->
	  d_field_ResourceStatistics_mem_anon_bytes(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12);
      96 ->
	  d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResourceStatistics(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9, F10, F11,
					       F12);
	    1 ->
		skip_64_ResourceStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12);
	    2 ->
		skip_length_delimited_ResourceStatistics(Rest, 0, 0, F1,
							 F2, F3, F4, F5, F6, F7,
							 F8, F9, F10, F11, F12);
	    5 ->
		skip_32_ResourceStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12)
	  end
    end;
dg_read_field_def_ResourceStatistics(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11,
				     F12) ->
    #'ResourceStatistics'{timestamp = F1,
			  cpus_user_time_secs = F2, cpus_system_time_secs = F3,
			  cpus_limit = F4, cpus_nr_periods = F5,
			  cpus_nr_throttled = F6, cpus_throttled_time_secs = F7,
			  mem_rss_bytes = F8, mem_limit_bytes = F9,
			  mem_file_bytes = F10, mem_anon_bytes = F11,
			  mem_mapped_file_bytes = F12}.

d_field_ResourceStatistics_timestamp(<<Value:64/little-float,
				       Rest/binary>>,
				     Z1, Z2, _, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2,
					  Value, F2, F3, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_user_time_secs(<<Value:64/little-float,
						 Rest/binary>>,
					       Z1, Z2, F1, _, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  Value, F3, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_system_time_secs(<<Value:64/little-float,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, _, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, Value, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_limit(<<Value:64/little-float,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, _, F5, F6, F7, F8, F9,
				      F10, F11, F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, Value, F5, F6, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_nr_periods(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_cpus_nr_periods(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12);
d_field_ResourceStatistics_cpus_nr_periods(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, _, F6, F7,
					   F8, F9, F10, F11, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, NewFValue, F6, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_nr_throttled(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_cpus_nr_throttled(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12);
d_field_ResourceStatistics_cpus_nr_throttled(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, _, F7,
					     F8, F9, F10, F11, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, NewFValue, F7, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_cpus_throttled_time_secs(<<Value:64/little-float,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, _, F8, F9, F10, F11,
						    F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, Value, F8, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_mem_rss_bytes(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_mem_rss_bytes(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12);
d_field_ResourceStatistics_mem_rss_bytes(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					 F9, F10, F11, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, NewFValue, F9,
					  F10, F11, F12).


d_field_ResourceStatistics_mem_limit_bytes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_mem_limit_bytes(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12);
d_field_ResourceStatistics_mem_limit_bytes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, _, F10, F11, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, NewFValue,
					  F10, F11, F12).


d_field_ResourceStatistics_mem_file_bytes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_mem_file_bytes(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12);
d_field_ResourceStatistics_mem_file_bytes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, _, F11, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9,
					  NewFValue, F11, F12).


d_field_ResourceStatistics_mem_anon_bytes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_mem_anon_bytes(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12);
d_field_ResourceStatistics_mem_anon_bytes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, _, F12) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  NewFValue, F12).


d_field_ResourceStatistics_mem_mapped_file_bytes(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12);
d_field_ResourceStatistics_mem_mapped_file_bytes(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, NewFValue).


skip_varint_ResourceStatistics(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12) ->
    skip_varint_ResourceStatistics(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12);
skip_varint_ResourceStatistics(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12).


skip_length_delimited_ResourceStatistics(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12)
    when N < 57 ->
    skip_length_delimited_ResourceStatistics(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12);
skip_length_delimited_ResourceStatistics(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResourceStatistics(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12).


skip_32_ResourceStatistics(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12).


skip_64_ResourceStatistics(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12).


d_msg_TaskStatus(Bin) ->
    dfp_read_field_def_TaskStatus(Bin, 0, 0, undefined,
				  undefined, undefined, undefined, undefined).

dfp_read_field_def_TaskStatus(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5) ->
    d_field_TaskStatus_task_id(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_TaskStatus(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5) ->
    d_field_TaskStatus_state(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_TaskStatus(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5) ->
    d_field_TaskStatus_message(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_TaskStatus(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5) ->
    d_field_TaskStatus_data(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5);
dfp_read_field_def_TaskStatus(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5) ->
    d_field_TaskStatus_slave_id(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
dfp_read_field_def_TaskStatus(<<>>, 0, 0, F1, F2, F3,
			      F4, F5) ->
    #'TaskStatus'{task_id = F1, state = F2, message = F3,
		  data = F4, slave_id = F5};
dfp_read_field_def_TaskStatus(Other, Z1, Z2, F1, F2, F3,
			      F4, F5) ->
    dg_read_field_def_TaskStatus(Other, Z1, Z2, F1, F2, F3,
				 F4, F5).

dg_read_field_def_TaskStatus(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_TaskStatus(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5);
dg_read_field_def_TaskStatus(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TaskStatus_task_id(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      16 ->
	  d_field_TaskStatus_state(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      34 ->
	  d_field_TaskStatus_message(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      26 ->
	  d_field_TaskStatus_data(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_TaskStatus_slave_id(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_TaskStatus(Rest, 0, 0, F1, F2, F3,
						 F4, F5);
	    5 -> skip_32_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_TaskStatus(<<>>, 0, 0, F1, F2, F3, F4,
			     F5) ->
    #'TaskStatus'{task_id = F1, state = F2, message = F3,
		  data = F4, slave_id = F5}.

d_field_TaskStatus_task_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_TaskStatus_task_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_TaskStatus_task_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'TaskID'),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true -> merge_msg_TaskID(F1, NewFValue)
				  end,
				  F2, F3, F4, F5).


d_field_TaskStatus_state(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_TaskStatus_state(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_TaskStatus_state(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TaskState(Tmp),
    dfp_read_field_def_TaskStatus(Rest, 0, 0, F1, NewFValue,
				  F3, F4, F5).


d_field_TaskStatus_message(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_TaskStatus_message(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_TaskStatus_message(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2,
				  NewFValue, F4, F5).


d_field_TaskStatus_data(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_TaskStatus_data(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
d_field_TaskStatus_data(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  NewFValue, F5).


d_field_TaskStatus_slave_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_TaskStatus_slave_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
d_field_TaskStatus_slave_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4,
				  if F5 == undefined -> NewFValue;
				     true -> merge_msg_SlaveID(F5, NewFValue)
				  end).


skip_varint_TaskStatus(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5) ->
    skip_varint_TaskStatus(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5);
skip_varint_TaskStatus(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5).


skip_length_delimited_TaskStatus(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_TaskStatus(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_TaskStatus(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5).


skip_32_TaskStatus(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5).


skip_64_TaskStatus(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5).


d_msg_Filters(Bin) ->
    dfp_read_field_def_Filters(Bin, 0, 0, undefined).

dfp_read_field_def_Filters(<<9, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_Filters_refuse_seconds(Rest, Z1, Z2, F1);
dfp_read_field_def_Filters(<<>>, 0, 0, F1) ->
    #'Filters'{refuse_seconds = F1};
dfp_read_field_def_Filters(Other, Z1, Z2, F1) ->
    dg_read_field_def_Filters(Other, Z1, Z2, F1).

dg_read_field_def_Filters(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Filters(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_Filters(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> d_field_Filters_refuse_seconds(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Filters(Rest, 0, 0, F1);
	    1 -> skip_64_Filters(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Filters(Rest, 0, 0, F1);
	    5 -> skip_32_Filters(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Filters(<<>>, 0, 0, F1) ->
    #'Filters'{refuse_seconds = F1}.

d_field_Filters_refuse_seconds(<<Value:64/little-float,
				 Rest/binary>>,
			       Z1, Z2, _) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, Value).


skip_varint_Filters(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_Filters(Rest, Z1, Z2, F1);
skip_varint_Filters(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


skip_length_delimited_Filters(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Filters(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_Filters(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Filters(Rest2, 0, 0, F1).


skip_32_Filters(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


skip_64_Filters(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


d_msg_Parameter(Bin) ->
    dfp_read_field_def_Parameter(Bin, 0, 0, undefined,
				 undefined).

dfp_read_field_def_Parameter(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_Parameter_key(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Parameter(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_Parameter_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Parameter(<<>>, 0, 0, F1, F2) ->
    #'Parameter'{key = F1, value = F2};
dfp_read_field_def_Parameter(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Parameter(Other, Z1, Z2, F1, F2).

dg_read_field_def_Parameter(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Parameter(Rest, N + 7, X bsl N + Acc,
				F1, F2);
dg_read_field_def_Parameter(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Parameter_key(Rest, 0, 0, F1, F2);
      18 -> d_field_Parameter_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Parameter(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Parameter(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_Parameter(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Parameter(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Parameter(<<>>, 0, 0, F1, F2) ->
    #'Parameter'{key = F1, value = F2}.

d_field_Parameter_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2)
    when N < 57 ->
    d_field_Parameter_key(Rest, N + 7, X bsl N + Acc, F1,
			  F2);
d_field_Parameter_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Parameter(Rest2, 0, 0, NewFValue,
				 F2).


d_field_Parameter_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 57 ->
    d_field_Parameter_value(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
d_field_Parameter_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Parameter(Rest2, 0, 0, F1,
				 NewFValue).


skip_varint_Parameter(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    skip_varint_Parameter(Rest, Z1, Z2, F1, F2);
skip_varint_Parameter(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Parameter(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Parameter(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
skip_length_delimited_Parameter(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Parameter(Rest2, 0, 0, F1, F2).


skip_32_Parameter(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


skip_64_Parameter(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


d_msg_Parameters(Bin) ->
    dfp_read_field_def_Parameters(Bin, 0, 0, []).

dfp_read_field_def_Parameters(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_Parameters_parameter(Rest, Z1, Z2, F1);
dfp_read_field_def_Parameters(<<>>, 0, 0, F1) ->
    #'Parameters'{parameter = lists:reverse(F1)};
dfp_read_field_def_Parameters(Other, Z1, Z2, F1) ->
    dg_read_field_def_Parameters(Other, Z1, Z2, F1).

dg_read_field_def_Parameters(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Parameters(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_Parameters(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Parameters_parameter(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Parameters(Rest, 0, 0, F1);
	    1 -> skip_64_Parameters(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Parameters(Rest, 0, 0, F1);
	    5 -> skip_32_Parameters(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Parameters(<<>>, 0, 0, F1) ->
    #'Parameters'{parameter = lists:reverse(F1)}.

d_field_Parameters_parameter(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    d_field_Parameters_parameter(Rest, N + 7, X bsl N + Acc,
				 F1);
d_field_Parameters_parameter(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Parameter'),
    dfp_read_field_def_Parameters(Rest2, 0, 0,
				  [NewFValue | F1]).


skip_varint_Parameters(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_Parameters(Rest, Z1, Z2, F1);
skip_varint_Parameters(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


skip_length_delimited_Parameters(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Parameters(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_Parameters(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Parameters(Rest2, 0, 0, F1).


skip_32_Parameters(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


skip_64_Parameters(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


d_msg_Credential(Bin) ->
    dfp_read_field_def_Credential(Bin, 0, 0, undefined,
				  undefined).

dfp_read_field_def_Credential(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_Credential_principal(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Credential(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_Credential_secret(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Credential(<<>>, 0, 0, F1, F2) ->
    #'Credential'{principal = F1, secret = F2};
dfp_read_field_def_Credential(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Credential(Other, Z1, Z2, F1, F2).

dg_read_field_def_Credential(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Credential(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
dg_read_field_def_Credential(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Credential_principal(Rest, 0, 0, F1, F2);
      18 -> d_field_Credential_secret(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Credential(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Credential(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_Credential(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Credential(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Credential(<<>>, 0, 0, F1, F2) ->
    #'Credential'{principal = F1, secret = F2}.

d_field_Credential_principal(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_Credential_principal(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_Credential_principal(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Credential(Rest2, 0, 0, NewFValue,
				  F2).


d_field_Credential_secret(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    d_field_Credential_secret(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
d_field_Credential_secret(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Credential(Rest2, 0, 0, F1,
				  NewFValue).


skip_varint_Credential(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    skip_varint_Credential(Rest, Z1, Z2, F1, F2);
skip_varint_Credential(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Credential(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Credential(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
skip_length_delimited_Credential(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Credential(Rest2, 0, 0, F1, F2).


skip_32_Credential(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


skip_64_Credential(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


d_msg_ResourceUsage(Bin) ->
    dfp_read_field_def_ResourceUsage(Bin, 0, 0, undefined,
				     undefined, undefined, undefined, undefined,
				     undefined).

dfp_read_field_def_ResourceUsage(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_slave_id(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_framework_id(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_executor_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_executor_name(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<42, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_task_id(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<50, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ResourceUsage_statistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
dfp_read_field_def_ResourceUsage(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6) ->
    #'ResourceUsage'{slave_id = F1, framework_id = F2,
		     executor_id = F3, executor_name = F4, task_id = F5,
		     statistics = F6};
dfp_read_field_def_ResourceUsage(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6) ->
    dg_read_field_def_ResourceUsage(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).

dg_read_field_def_ResourceUsage(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_ResourceUsage(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_ResourceUsage(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResourceUsage_slave_id(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6);
      18 ->
	  d_field_ResourceUsage_framework_id(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6);
      26 ->
	  d_field_ResourceUsage_executor_id(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      34 ->
	  d_field_ResourceUsage_executor_name(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      42 ->
	  d_field_ResourceUsage_task_id(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6);
      50 ->
	  d_field_ResourceUsage_statistics(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResourceUsage(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6);
	    1 ->
		skip_64_ResourceUsage(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6);
	    2 ->
		skip_length_delimited_ResourceUsage(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6);
	    5 ->
		skip_32_ResourceUsage(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6)
	  end
    end;
dg_read_field_def_ResourceUsage(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6) ->
    #'ResourceUsage'{slave_id = F1, framework_id = F2,
		     executor_id = F3, executor_name = F4, task_id = F5,
		     statistics = F6}.

d_field_ResourceUsage_slave_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_slave_id(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_slave_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true -> merge_msg_SlaveID(F1, NewFValue)
				     end,
				     F2, F3, F4, F5, F6).


d_field_ResourceUsage_framework_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_framework_id(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_framework_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FrameworkID'),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1,
				     if F2 == undefined -> NewFValue;
					true ->
					    merge_msg_FrameworkID(F2, NewFValue)
				     end,
				     F3, F4, F5, F6).


d_field_ResourceUsage_executor_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_executor_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_executor_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ExecutorID'),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2,
				     if F3 == undefined -> NewFValue;
					true ->
					    merge_msg_ExecutorID(F3, NewFValue)
				     end,
				     F4, F5, F6).


d_field_ResourceUsage_executor_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_executor_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_executor_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, _, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2,
				     F3, NewFValue, F5, F6).


d_field_ResourceUsage_task_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_task_id(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_task_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'TaskID'),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2,
				     F3, F4,
				     if F5 == undefined -> NewFValue;
					true -> merge_msg_TaskID(F5, NewFValue)
				     end,
				     F6).


d_field_ResourceUsage_statistics(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ResourceUsage_statistics(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ResourceUsage_statistics(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ResourceStatistics'),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2,
				     F3, F4, F5,
				     if F6 == undefined -> NewFValue;
					true ->
					    merge_msg_ResourceStatistics(F6,
									 NewFValue)
				     end).


skip_varint_ResourceUsage(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_ResourceUsage(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
skip_varint_ResourceUsage(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_length_delimited_ResourceUsage(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_ResourceUsage(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_ResourceUsage(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6).


skip_32_ResourceUsage(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_64_ResourceUsage(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


d_msg_OfferID(Bin) ->
    dfp_read_field_def_OfferID(Bin, 0, 0, undefined).

dfp_read_field_def_OfferID(<<10, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_OfferID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_OfferID(<<>>, 0, 0, F1) ->
    #'OfferID'{value = F1};
dfp_read_field_def_OfferID(Other, Z1, Z2, F1) ->
    dg_read_field_def_OfferID(Other, Z1, Z2, F1).

dg_read_field_def_OfferID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_OfferID(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_OfferID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_OfferID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_OfferID(Rest, 0, 0, F1);
	    1 -> skip_64_OfferID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_OfferID(Rest, 0, 0, F1);
	    5 -> skip_32_OfferID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_OfferID(<<>>, 0, 0, F1) ->
    #'OfferID'{value = F1}.

d_field_OfferID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1)
    when N < 57 ->
    d_field_OfferID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_OfferID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_OfferID(Rest2, 0, 0, NewFValue).


skip_varint_OfferID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_OfferID(Rest, Z1, Z2, F1);
skip_varint_OfferID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


skip_length_delimited_OfferID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_OfferID(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_OfferID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfferID(Rest2, 0, 0, F1).


skip_32_OfferID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


skip_64_OfferID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


d_msg_Offer(Bin) ->
    dfp_read_field_def_Offer(Bin, 0, 0, undefined,
			     undefined, undefined, undefined, [], [], []).

dfp_read_field_def_Offer(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_id(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7);
dfp_read_field_def_Offer(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_framework_id(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_Offer(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_slave_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
dfp_read_field_def_Offer(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_hostname(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
dfp_read_field_def_Offer(<<42, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_resources(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7);
dfp_read_field_def_Offer(<<58, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_attributes(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_Offer(<<50, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7) ->
    d_field_Offer_executor_ids(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_Offer(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, F7) ->
    #'Offer'{id = F1, framework_id = F2, slave_id = F3,
	     hostname = F4, resources = lists:reverse(F5),
	     attributes = lists:reverse(F6),
	     executor_ids = lists:reverse(F7)};
dfp_read_field_def_Offer(Other, Z1, Z2, F1, F2, F3, F4,
			 F5, F6, F7) ->
    dg_read_field_def_Offer(Other, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7).

dg_read_field_def_Offer(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_Offer(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7);
dg_read_field_def_Offer(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Offer_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			   F7);
      18 ->
	  d_field_Offer_framework_id(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      26 ->
	  d_field_Offer_slave_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7);
      34 ->
	  d_field_Offer_hostname(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7);
      42 ->
	  d_field_Offer_resources(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7);
      58 ->
	  d_field_Offer_attributes(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      50 ->
	  d_field_Offer_executor_ids(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7);
	    1 ->
		skip_64_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7);
	    2 ->
		skip_length_delimited_Offer(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7);
	    5 ->
		skip_32_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7)
	  end
    end;
dg_read_field_def_Offer(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7) ->
    #'Offer'{id = F1, framework_id = F2, slave_id = F3,
	     hostname = F4, resources = lists:reverse(F5),
	     attributes = lists:reverse(F6),
	     executor_ids = lists:reverse(F7)}.

d_field_Offer_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_id(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, F6, F7);
d_field_Offer_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'OfferID'),
    dfp_read_field_def_Offer(Rest2, 0, 0,
			     if F1 == undefined -> NewFValue;
				true -> merge_msg_OfferID(F1, NewFValue)
			     end,
			     F2, F3, F4, F5, F6, F7).


d_field_Offer_framework_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_framework_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_Offer_framework_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FrameworkID'),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true -> merge_msg_FrameworkID(F2, NewFValue)
			     end,
			     F3, F4, F5, F6, F7).


d_field_Offer_slave_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_slave_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7);
d_field_Offer_slave_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SlaveID'),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2,
			     if F3 == undefined -> NewFValue;
				true -> merge_msg_SlaveID(F3, NewFValue)
			     end,
			     F4, F5, F6, F7).


d_field_Offer_hostname(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_hostname(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7);
d_field_Offer_hostname(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3,
			     NewFValue, F5, F6, F7).


d_field_Offer_resources(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_resources(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7);
d_field_Offer_resources(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Resource'),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     [NewFValue | F5], F6, F7).


d_field_Offer_attributes(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_attributes(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_Offer_attributes(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Attribute'),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, [NewFValue | F6], F7).


d_field_Offer_executor_ids(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_Offer_executor_ids(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_Offer_executor_ids(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ExecutorID'),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, [NewFValue | F7]).


skip_varint_Offer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, F7) ->
    skip_varint_Offer(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7);
skip_varint_Offer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7).


skip_length_delimited_Offer(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_Offer(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
skip_length_delimited_Offer(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7).


skip_32_Offer(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, F7) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7).


skip_64_Offer(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, F7) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'Environment.Variable'{} ->
	  'merge_msg_Environment.Variable'(Prev, New);
      #'Environment'{} -> merge_msg_Environment(Prev, New);
      #'CommandInfo.URI'{} ->
	  'merge_msg_CommandInfo.URI'(Prev, New);
      #'CommandInfo'{} -> merge_msg_CommandInfo(Prev, New);
      #'Value.Text'{} -> 'merge_msg_Value.Text'(Prev, New);
      #'Value.Set'{} -> 'merge_msg_Value.Set'(Prev, New);
      #'Value.Range'{} -> 'merge_msg_Value.Range'(Prev, New);
      #'Value.Ranges'{} ->
	  'merge_msg_Value.Ranges'(Prev, New);
      #'Value.Scalar'{} ->
	  'merge_msg_Value.Scalar'(Prev, New);
      #'Value'{} -> merge_msg_Value(Prev, New);
      #'Resource'{} -> merge_msg_Resource(Prev, New);
      #'SlaveID'{} -> merge_msg_SlaveID(Prev, New);
      #'Request'{} -> merge_msg_Request(Prev, New);
      #'Attribute'{} -> merge_msg_Attribute(Prev, New);
      #'SlaveInfo'{} -> merge_msg_SlaveInfo(Prev, New);
      #'FrameworkID'{} -> merge_msg_FrameworkID(Prev, New);
      #'ExecutorID'{} -> merge_msg_ExecutorID(Prev, New);
      #'ExecutorInfo'{} -> merge_msg_ExecutorInfo(Prev, New);
      #'TaskID'{} -> merge_msg_TaskID(Prev, New);
      #'TaskInfo'{} -> merge_msg_TaskInfo(Prev, New);
      #'MasterInfo'{} -> merge_msg_MasterInfo(Prev, New);
      #'FrameworkInfo'{} ->
	  merge_msg_FrameworkInfo(Prev, New);
      #'ResourceStatistics'{} ->
	  merge_msg_ResourceStatistics(Prev, New);
      #'TaskStatus'{} -> merge_msg_TaskStatus(Prev, New);
      #'Filters'{} -> merge_msg_Filters(Prev, New);
      #'Parameter'{} -> merge_msg_Parameter(Prev, New);
      #'Parameters'{} -> merge_msg_Parameters(Prev, New);
      #'Credential'{} -> merge_msg_Credential(Prev, New);
      #'ResourceUsage'{} ->
	  merge_msg_ResourceUsage(Prev, New);
      #'OfferID'{} -> merge_msg_OfferID(Prev, New);
      #'Offer'{} -> merge_msg_Offer(Prev, New)
    end.

'merge_msg_Environment.Variable'(#'Environment.Variable'{name
							     = PFname,
							 value = PFvalue},
				 #'Environment.Variable'{name = NFname,
							 value = NFvalue}) ->
    #'Environment.Variable'{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end,
			    value =
				if NFvalue =:= undefined -> PFvalue;
				   true -> NFvalue
				end}.

merge_msg_Environment(Prev, undefined) -> Prev;
merge_msg_Environment(undefined, New) -> New;
merge_msg_Environment(#'Environment'{variables =
					 PFvariables},
		      #'Environment'{variables = NFvariables}) ->
    #'Environment'{variables = PFvariables ++ NFvariables}.

'merge_msg_CommandInfo.URI'(#'CommandInfo.URI'{value =
						   PFvalue,
					       executable = PFexecutable},
			    #'CommandInfo.URI'{value = NFvalue,
					       executable = NFexecutable}) ->
    #'CommandInfo.URI'{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end,
		       executable =
			   if NFexecutable =:= undefined -> PFexecutable;
			      true -> NFexecutable
			   end}.

merge_msg_CommandInfo(Prev, undefined) -> Prev;
merge_msg_CommandInfo(undefined, New) -> New;
merge_msg_CommandInfo(#'CommandInfo'{uris = PFuris,
				     environment = PFenvironment,
				     value = PFvalue},
		      #'CommandInfo'{uris = NFuris,
				     environment = NFenvironment,
				     value = NFvalue}) ->
    #'CommandInfo'{uris = PFuris ++ NFuris,
		   environment =
		       merge_msg_Environment(PFenvironment, NFenvironment),
		   value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

'merge_msg_Value.Text'(Prev, undefined) -> Prev;
'merge_msg_Value.Text'(undefined, New) -> New;
'merge_msg_Value.Text'(#'Value.Text'{value = PFvalue},
		       #'Value.Text'{value = NFvalue}) ->
    #'Value.Text'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

'merge_msg_Value.Set'(Prev, undefined) -> Prev;
'merge_msg_Value.Set'(undefined, New) -> New;
'merge_msg_Value.Set'(#'Value.Set'{item = PFitem},
		      #'Value.Set'{item = NFitem}) ->
    #'Value.Set'{item = PFitem ++ NFitem}.

'merge_msg_Value.Range'(#'Value.Range'{'begin' =
					   PFbegin,
				       'end' = PFend},
			#'Value.Range'{'begin' = NFbegin, 'end' = NFend}) ->
    #'Value.Range'{'begin' =
		       if NFbegin =:= undefined -> PFbegin;
			  true -> NFbegin
		       end,
		   'end' =
		       if NFend =:= undefined -> PFend;
			  true -> NFend
		       end}.

'merge_msg_Value.Ranges'(Prev, undefined) -> Prev;
'merge_msg_Value.Ranges'(undefined, New) -> New;
'merge_msg_Value.Ranges'(#'Value.Ranges'{range =
					     PFrange},
			 #'Value.Ranges'{range = NFrange}) ->
    #'Value.Ranges'{range = PFrange ++ NFrange}.

'merge_msg_Value.Scalar'(Prev, undefined) -> Prev;
'merge_msg_Value.Scalar'(undefined, New) -> New;
'merge_msg_Value.Scalar'(#'Value.Scalar'{value =
					     PFvalue},
			 #'Value.Scalar'{value = NFvalue}) ->
    #'Value.Scalar'{value =
			if NFvalue =:= undefined -> PFvalue;
			   true -> NFvalue
			end}.

merge_msg_Value(#'Value'{type = PFtype,
			 scalar = PFscalar, ranges = PFranges, set = PFset,
			 text = PFtext},
		#'Value'{type = NFtype, scalar = NFscalar,
			 ranges = NFranges, set = NFset, text = NFtext}) ->
    #'Value'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
	     ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
	     set = 'merge_msg_Value.Set'(PFset, NFset),
	     text = 'merge_msg_Value.Text'(PFtext, NFtext)}.

merge_msg_Resource(#'Resource'{name = PFname,
			       type = PFtype, scalar = PFscalar,
			       ranges = PFranges, set = PFset, role = PFrole},
		   #'Resource'{name = NFname, type = NFtype,
			       scalar = NFscalar, ranges = NFranges,
			       set = NFset, role = NFrole}) ->
    #'Resource'{name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
		ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
		set = 'merge_msg_Value.Set'(PFset, NFset),
		role =
		    if NFrole =:= undefined -> PFrole;
		       true -> NFrole
		    end}.

merge_msg_SlaveID(Prev, undefined) -> Prev;
merge_msg_SlaveID(undefined, New) -> New;
merge_msg_SlaveID(#'SlaveID'{value = PFvalue},
		  #'SlaveID'{value = NFvalue}) ->
    #'SlaveID'{value =
		   if NFvalue =:= undefined -> PFvalue;
		      true -> NFvalue
		   end}.

merge_msg_Request(#'Request'{slave_id = PFslave_id,
			     resources = PFresources},
		  #'Request'{slave_id = NFslave_id,
			     resources = NFresources}) ->
    #'Request'{slave_id =
		   merge_msg_SlaveID(PFslave_id, NFslave_id),
	       resources = PFresources ++ NFresources}.

merge_msg_Attribute(#'Attribute'{name = PFname,
				 type = PFtype, scalar = PFscalar,
				 ranges = PFranges, set = PFset, text = PFtext},
		    #'Attribute'{name = NFname, type = NFtype,
				 scalar = NFscalar, ranges = NFranges,
				 set = NFset, text = NFtext}) ->
    #'Attribute'{name =
		     if NFname =:= undefined -> PFname;
			true -> NFname
		     end,
		 type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end,
		 scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
		 ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
		 set = 'merge_msg_Value.Set'(PFset, NFset),
		 text = 'merge_msg_Value.Text'(PFtext, NFtext)}.

merge_msg_SlaveInfo(#'SlaveInfo'{hostname = PFhostname,
				 port = PFport, resources = PFresources,
				 attributes = PFattributes, id = PFid,
				 checkpoint = PFcheckpoint,
				 webui_hostname = PFwebui_hostname,
				 webui_port = PFwebui_port},
		    #'SlaveInfo'{hostname = NFhostname, port = NFport,
				 resources = NFresources,
				 attributes = NFattributes, id = NFid,
				 checkpoint = NFcheckpoint,
				 webui_hostname = NFwebui_hostname,
				 webui_port = NFwebui_port}) ->
    #'SlaveInfo'{hostname =
		     if NFhostname =:= undefined -> PFhostname;
			true -> NFhostname
		     end,
		 port =
		     if NFport =:= undefined -> PFport;
			true -> NFport
		     end,
		 resources = PFresources ++ NFresources,
		 attributes = PFattributes ++ NFattributes,
		 id = merge_msg_SlaveID(PFid, NFid),
		 checkpoint =
		     if NFcheckpoint =:= undefined -> PFcheckpoint;
			true -> NFcheckpoint
		     end,
		 webui_hostname =
		     if NFwebui_hostname =:= undefined -> PFwebui_hostname;
			true -> NFwebui_hostname
		     end,
		 webui_port =
		     if NFwebui_port =:= undefined -> PFwebui_port;
			true -> NFwebui_port
		     end}.

merge_msg_FrameworkID(Prev, undefined) -> Prev;
merge_msg_FrameworkID(undefined, New) -> New;
merge_msg_FrameworkID(#'FrameworkID'{value = PFvalue},
		      #'FrameworkID'{value = NFvalue}) ->
    #'FrameworkID'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

merge_msg_ExecutorID(Prev, undefined) -> Prev;
merge_msg_ExecutorID(undefined, New) -> New;
merge_msg_ExecutorID(#'ExecutorID'{value = PFvalue},
		     #'ExecutorID'{value = NFvalue}) ->
    #'ExecutorID'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

merge_msg_ExecutorInfo(Prev, undefined) -> Prev;
merge_msg_ExecutorInfo(undefined, New) -> New;
merge_msg_ExecutorInfo(#'ExecutorInfo'{executor_id =
					   PFexecutor_id,
				       framework_id = PFframework_id,
				       command = PFcommand,
				       resources = PFresources, name = PFname,
				       source = PFsource, data = PFdata},
		       #'ExecutorInfo'{executor_id = NFexecutor_id,
				       framework_id = NFframework_id,
				       command = NFcommand,
				       resources = NFresources, name = NFname,
				       source = NFsource, data = NFdata}) ->
    #'ExecutorInfo'{executor_id =
			merge_msg_ExecutorID(PFexecutor_id, NFexecutor_id),
		    framework_id =
			merge_msg_FrameworkID(PFframework_id, NFframework_id),
		    command = merge_msg_CommandInfo(PFcommand, NFcommand),
		    resources = PFresources ++ NFresources,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    source =
			if NFsource =:= undefined -> PFsource;
			   true -> NFsource
			end,
		    data =
			if NFdata =:= undefined -> PFdata;
			   true -> NFdata
			end}.

merge_msg_TaskID(Prev, undefined) -> Prev;
merge_msg_TaskID(undefined, New) -> New;
merge_msg_TaskID(#'TaskID'{value = PFvalue},
		 #'TaskID'{value = NFvalue}) ->
    #'TaskID'{value =
		  if NFvalue =:= undefined -> PFvalue;
		     true -> NFvalue
		  end}.

merge_msg_TaskInfo(#'TaskInfo'{name = PFname,
			       task_id = PFtask_id, slave_id = PFslave_id,
			       resources = PFresources, executor = PFexecutor,
			       command = PFcommand, data = PFdata},
		   #'TaskInfo'{name = NFname, task_id = NFtask_id,
			       slave_id = NFslave_id, resources = NFresources,
			       executor = NFexecutor, command = NFcommand,
			       data = NFdata}) ->
    #'TaskInfo'{name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		task_id = merge_msg_TaskID(PFtask_id, NFtask_id),
		slave_id = merge_msg_SlaveID(PFslave_id, NFslave_id),
		resources = PFresources ++ NFresources,
		executor =
		    merge_msg_ExecutorInfo(PFexecutor, NFexecutor),
		command = merge_msg_CommandInfo(PFcommand, NFcommand),
		data =
		    if NFdata =:= undefined -> PFdata;
		       true -> NFdata
		    end}.

merge_msg_MasterInfo(#'MasterInfo'{id = PFid, ip = PFip,
				   port = PFport},
		     #'MasterInfo'{id = NFid, ip = NFip, port = NFport}) ->
    #'MasterInfo'{id =
		      if NFid =:= undefined -> PFid;
			 true -> NFid
		      end,
		  ip =
		      if NFip =:= undefined -> PFip;
			 true -> NFip
		      end,
		  port =
		      if NFport =:= undefined -> PFport;
			 true -> NFport
		      end}.

merge_msg_FrameworkInfo(#'FrameworkInfo'{user = PFuser,
					 name = PFname, id = PFid,
					 failover_timeout = PFfailover_timeout,
					 checkpoint = PFcheckpoint,
					 role = PFrole},
			#'FrameworkInfo'{user = NFuser, name = NFname,
					 id = NFid,
					 failover_timeout = NFfailover_timeout,
					 checkpoint = NFcheckpoint,
					 role = NFrole}) ->
    #'FrameworkInfo'{user =
			 if NFuser =:= undefined -> PFuser;
			    true -> NFuser
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     id = merge_msg_FrameworkID(PFid, NFid),
		     failover_timeout =
			 if NFfailover_timeout =:= undefined ->
				PFfailover_timeout;
			    true -> NFfailover_timeout
			 end,
		     checkpoint =
			 if NFcheckpoint =:= undefined -> PFcheckpoint;
			    true -> NFcheckpoint
			 end,
		     role =
			 if NFrole =:= undefined -> PFrole;
			    true -> NFrole
			 end}.

merge_msg_ResourceStatistics(Prev, undefined) -> Prev;
merge_msg_ResourceStatistics(undefined, New) -> New;
merge_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						       = PFtimestamp,
						   cpus_user_time_secs =
						       PFcpus_user_time_secs,
						   cpus_system_time_secs =
						       PFcpus_system_time_secs,
						   cpus_limit = PFcpus_limit,
						   cpus_nr_periods =
						       PFcpus_nr_periods,
						   cpus_nr_throttled =
						       PFcpus_nr_throttled,
						   cpus_throttled_time_secs =
						       PFcpus_throttled_time_secs,
						   mem_rss_bytes =
						       PFmem_rss_bytes,
						   mem_limit_bytes =
						       PFmem_limit_bytes,
						   mem_file_bytes =
						       PFmem_file_bytes,
						   mem_anon_bytes =
						       PFmem_anon_bytes,
						   mem_mapped_file_bytes =
						       PFmem_mapped_file_bytes},
			     #'ResourceStatistics'{timestamp = NFtimestamp,
						   cpus_user_time_secs =
						       NFcpus_user_time_secs,
						   cpus_system_time_secs =
						       NFcpus_system_time_secs,
						   cpus_limit = NFcpus_limit,
						   cpus_nr_periods =
						       NFcpus_nr_periods,
						   cpus_nr_throttled =
						       NFcpus_nr_throttled,
						   cpus_throttled_time_secs =
						       NFcpus_throttled_time_secs,
						   mem_rss_bytes =
						       NFmem_rss_bytes,
						   mem_limit_bytes =
						       NFmem_limit_bytes,
						   mem_file_bytes =
						       NFmem_file_bytes,
						   mem_anon_bytes =
						       NFmem_anon_bytes,
						   mem_mapped_file_bytes =
						       NFmem_mapped_file_bytes}) ->
    #'ResourceStatistics'{timestamp =
			      if NFtimestamp =:= undefined -> PFtimestamp;
				 true -> NFtimestamp
			      end,
			  cpus_user_time_secs =
			      if NFcpus_user_time_secs =:= undefined ->
				     PFcpus_user_time_secs;
				 true -> NFcpus_user_time_secs
			      end,
			  cpus_system_time_secs =
			      if NFcpus_system_time_secs =:= undefined ->
				     PFcpus_system_time_secs;
				 true -> NFcpus_system_time_secs
			      end,
			  cpus_limit =
			      if NFcpus_limit =:= undefined -> PFcpus_limit;
				 true -> NFcpus_limit
			      end,
			  cpus_nr_periods =
			      if NFcpus_nr_periods =:= undefined ->
				     PFcpus_nr_periods;
				 true -> NFcpus_nr_periods
			      end,
			  cpus_nr_throttled =
			      if NFcpus_nr_throttled =:= undefined ->
				     PFcpus_nr_throttled;
				 true -> NFcpus_nr_throttled
			      end,
			  cpus_throttled_time_secs =
			      if NFcpus_throttled_time_secs =:= undefined ->
				     PFcpus_throttled_time_secs;
				 true -> NFcpus_throttled_time_secs
			      end,
			  mem_rss_bytes =
			      if NFmem_rss_bytes =:= undefined ->
				     PFmem_rss_bytes;
				 true -> NFmem_rss_bytes
			      end,
			  mem_limit_bytes =
			      if NFmem_limit_bytes =:= undefined ->
				     PFmem_limit_bytes;
				 true -> NFmem_limit_bytes
			      end,
			  mem_file_bytes =
			      if NFmem_file_bytes =:= undefined ->
				     PFmem_file_bytes;
				 true -> NFmem_file_bytes
			      end,
			  mem_anon_bytes =
			      if NFmem_anon_bytes =:= undefined ->
				     PFmem_anon_bytes;
				 true -> NFmem_anon_bytes
			      end,
			  mem_mapped_file_bytes =
			      if NFmem_mapped_file_bytes =:= undefined ->
				     PFmem_mapped_file_bytes;
				 true -> NFmem_mapped_file_bytes
			      end}.

merge_msg_TaskStatus(#'TaskStatus'{task_id = PFtask_id,
				   state = PFstate, message = PFmessage,
				   data = PFdata, slave_id = PFslave_id},
		     #'TaskStatus'{task_id = NFtask_id, state = NFstate,
				   message = NFmessage, data = NFdata,
				   slave_id = NFslave_id}) ->
    #'TaskStatus'{task_id =
		      merge_msg_TaskID(PFtask_id, NFtask_id),
		  state =
		      if NFstate =:= undefined -> PFstate;
			 true -> NFstate
		      end,
		  message =
		      if NFmessage =:= undefined -> PFmessage;
			 true -> NFmessage
		      end,
		  data =
		      if NFdata =:= undefined -> PFdata;
			 true -> NFdata
		      end,
		  slave_id = merge_msg_SlaveID(PFslave_id, NFslave_id)}.

merge_msg_Filters(#'Filters'{refuse_seconds =
				 PFrefuse_seconds},
		  #'Filters'{refuse_seconds = NFrefuse_seconds}) ->
    #'Filters'{refuse_seconds =
		   if NFrefuse_seconds =:= undefined -> PFrefuse_seconds;
		      true -> NFrefuse_seconds
		   end}.

merge_msg_Parameter(#'Parameter'{key = PFkey,
				 value = PFvalue},
		    #'Parameter'{key = NFkey, value = NFvalue}) ->
    #'Parameter'{key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 value =
		     if NFvalue =:= undefined -> PFvalue;
			true -> NFvalue
		     end}.

merge_msg_Parameters(#'Parameters'{parameter =
				       PFparameter},
		     #'Parameters'{parameter = NFparameter}) ->
    #'Parameters'{parameter = PFparameter ++ NFparameter}.

merge_msg_Credential(#'Credential'{principal =
				       PFprincipal,
				   secret = PFsecret},
		     #'Credential'{principal = NFprincipal,
				   secret = NFsecret}) ->
    #'Credential'{principal =
		      if NFprincipal =:= undefined -> PFprincipal;
			 true -> NFprincipal
		      end,
		  secret =
		      if NFsecret =:= undefined -> PFsecret;
			 true -> NFsecret
		      end}.

merge_msg_ResourceUsage(#'ResourceUsage'{slave_id =
					     PFslave_id,
					 framework_id = PFframework_id,
					 executor_id = PFexecutor_id,
					 executor_name = PFexecutor_name,
					 task_id = PFtask_id,
					 statistics = PFstatistics},
			#'ResourceUsage'{slave_id = NFslave_id,
					 framework_id = NFframework_id,
					 executor_id = NFexecutor_id,
					 executor_name = NFexecutor_name,
					 task_id = NFtask_id,
					 statistics = NFstatistics}) ->
    #'ResourceUsage'{slave_id =
			 merge_msg_SlaveID(PFslave_id, NFslave_id),
		     framework_id =
			 merge_msg_FrameworkID(PFframework_id, NFframework_id),
		     executor_id =
			 merge_msg_ExecutorID(PFexecutor_id, NFexecutor_id),
		     executor_name =
			 if NFexecutor_name =:= undefined -> PFexecutor_name;
			    true -> NFexecutor_name
			 end,
		     task_id = merge_msg_TaskID(PFtask_id, NFtask_id),
		     statistics =
			 merge_msg_ResourceStatistics(PFstatistics,
						      NFstatistics)}.

merge_msg_OfferID(#'OfferID'{value = PFvalue},
		  #'OfferID'{value = NFvalue}) ->
    #'OfferID'{value =
		   if NFvalue =:= undefined -> PFvalue;
		      true -> NFvalue
		   end}.

merge_msg_Offer(#'Offer'{id = PFid,
			 framework_id = PFframework_id, slave_id = PFslave_id,
			 hostname = PFhostname, resources = PFresources,
			 attributes = PFattributes,
			 executor_ids = PFexecutor_ids},
		#'Offer'{id = NFid, framework_id = NFframework_id,
			 slave_id = NFslave_id, hostname = NFhostname,
			 resources = NFresources, attributes = NFattributes,
			 executor_ids = NFexecutor_ids}) ->
    #'Offer'{id = merge_msg_OfferID(PFid, NFid),
	     framework_id =
		 merge_msg_FrameworkID(PFframework_id, NFframework_id),
	     slave_id = merge_msg_SlaveID(PFslave_id, NFslave_id),
	     hostname =
		 if NFhostname =:= undefined -> PFhostname;
		    true -> NFhostname
		 end,
	     resources = PFresources ++ NFresources,
	     attributes = PFattributes ++ NFattributes,
	     executor_ids = PFexecutor_ids ++ NFexecutor_ids}.



verify_msg(Msg) ->
    case Msg of
      #'Environment.Variable'{} ->
	  'v_msg_Environment.Variable'(Msg,
				       ['Environment.Variable']);
      #'Environment'{} ->
	  v_msg_Environment(Msg, ['Environment']);
      #'CommandInfo.URI'{} ->
	  'v_msg_CommandInfo.URI'(Msg, ['CommandInfo.URI']);
      #'CommandInfo'{} ->
	  v_msg_CommandInfo(Msg, ['CommandInfo']);
      #'Value.Text'{} ->
	  'v_msg_Value.Text'(Msg, ['Value.Text']);
      #'Value.Set'{} -> 'v_msg_Value.Set'(Msg, ['Value.Set']);
      #'Value.Range'{} ->
	  'v_msg_Value.Range'(Msg, ['Value.Range']);
      #'Value.Ranges'{} ->
	  'v_msg_Value.Ranges'(Msg, ['Value.Ranges']);
      #'Value.Scalar'{} ->
	  'v_msg_Value.Scalar'(Msg, ['Value.Scalar']);
      #'Value'{} -> v_msg_Value(Msg, ['Value']);
      #'Resource'{} -> v_msg_Resource(Msg, ['Resource']);
      #'SlaveID'{} -> v_msg_SlaveID(Msg, ['SlaveID']);
      #'Request'{} -> v_msg_Request(Msg, ['Request']);
      #'Attribute'{} -> v_msg_Attribute(Msg, ['Attribute']);
      #'SlaveInfo'{} -> v_msg_SlaveInfo(Msg, ['SlaveInfo']);
      #'FrameworkID'{} ->
	  v_msg_FrameworkID(Msg, ['FrameworkID']);
      #'ExecutorID'{} ->
	  v_msg_ExecutorID(Msg, ['ExecutorID']);
      #'ExecutorInfo'{} ->
	  v_msg_ExecutorInfo(Msg, ['ExecutorInfo']);
      #'TaskID'{} -> v_msg_TaskID(Msg, ['TaskID']);
      #'TaskInfo'{} -> v_msg_TaskInfo(Msg, ['TaskInfo']);
      #'MasterInfo'{} ->
	  v_msg_MasterInfo(Msg, ['MasterInfo']);
      #'FrameworkInfo'{} ->
	  v_msg_FrameworkInfo(Msg, ['FrameworkInfo']);
      #'ResourceStatistics'{} ->
	  v_msg_ResourceStatistics(Msg, ['ResourceStatistics']);
      #'TaskStatus'{} ->
	  v_msg_TaskStatus(Msg, ['TaskStatus']);
      #'Filters'{} -> v_msg_Filters(Msg, ['Filters']);
      #'Parameter'{} -> v_msg_Parameter(Msg, ['Parameter']);
      #'Parameters'{} ->
	  v_msg_Parameters(Msg, ['Parameters']);
      #'Credential'{} ->
	  v_msg_Credential(Msg, ['Credential']);
      #'ResourceUsage'{} ->
	  v_msg_ResourceUsage(Msg, ['ResourceUsage']);
      #'OfferID'{} -> v_msg_OfferID(Msg, ['OfferID']);
      #'Offer'{} -> v_msg_Offer(Msg, ['Offer']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


'v_msg_Environment.Variable'(#'Environment.Variable'{name
							 = F1,
						     value = F2},
			     Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [value | Path]),
    ok;
'v_msg_Environment.Variable'(X, Path) ->
    mk_type_error({expected_msg, 'Environment.Variable'}, X,
		  Path).

v_msg_Environment(#'Environment'{variables = F1},
		  Path) ->
    if is_list(F1) ->
	   ['v_msg_Environment.Variable'(Elem, [variables | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Environment.Variable'}},
			 F1, Path)
    end,
    ok;
v_msg_Environment(X, Path) ->
    mk_type_error({expected_msg, 'Environment'}, X, Path).

'v_msg_CommandInfo.URI'(#'CommandInfo.URI'{value = F1,
					   executable = F2},
			Path) ->
    v_type_string(F1, [value | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [executable, Path])
    end,
    ok;
'v_msg_CommandInfo.URI'(X, Path) ->
    mk_type_error({expected_msg, 'CommandInfo.URI'}, X,
		  Path).

v_msg_CommandInfo(#'CommandInfo'{uris = F1,
				 environment = F2, value = F3},
		  Path) ->
    if is_list(F1) ->
	   ['v_msg_CommandInfo.URI'(Elem, [uris | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'CommandInfo.URI'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Environment(F2, [environment, Path])
    end,
    v_type_string(F3, [value | Path]),
    ok;
v_msg_CommandInfo(X, Path) ->
    mk_type_error({expected_msg, 'CommandInfo'}, X, Path).

'v_msg_Value.Text'(#'Value.Text'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_Value.Text'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Text'}, X, Path).

'v_msg_Value.Set'(#'Value.Set'{item = F1}, Path) ->
    if is_list(F1) ->
	   [v_type_string(Elem, [item | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok;
'v_msg_Value.Set'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Set'}, X, Path).

'v_msg_Value.Range'(#'Value.Range'{'begin' = F1,
				   'end' = F2},
		    Path) ->
    v_type_uint64(F1, ['begin' | Path]),
    v_type_uint64(F2, ['end' | Path]),
    ok;
'v_msg_Value.Range'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Range'}, X, Path).

'v_msg_Value.Ranges'(#'Value.Ranges'{range = F1},
		     Path) ->
    if is_list(F1) ->
	   ['v_msg_Value.Range'(Elem, [range | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Value.Range'}},
			 F1, Path)
    end,
    ok;
'v_msg_Value.Ranges'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Ranges'}, X, Path).

'v_msg_Value.Scalar'(#'Value.Scalar'{value = F1},
		     Path) ->
    v_type_double(F1, [value | Path]), ok;
'v_msg_Value.Scalar'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Scalar'}, X, Path).

v_msg_Value(#'Value'{type = F1, scalar = F2,
		     ranges = F3, set = F4, text = F5},
	    Path) ->
    'v_enum_Value.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F2, [scalar, Path])
    end,
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F3, [ranges, Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F4, [set, Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Text'(F5, [text, Path])
    end,
    ok.

v_msg_Resource(#'Resource'{name = F1, type = F2,
			   scalar = F3, ranges = F4, set = F5, role = F6},
	       Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F3, [scalar, Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F4, [ranges, Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F5, [set, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role, Path])
    end,
    ok;
v_msg_Resource(X, Path) ->
    mk_type_error({expected_msg, 'Resource'}, X, Path).

v_msg_SlaveID(#'SlaveID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_SlaveID(X, Path) ->
    mk_type_error({expected_msg, 'SlaveID'}, X, Path).

v_msg_Request(#'Request'{slave_id = F1, resources = F2},
	      Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_SlaveID(F1, [slave_id, Path])
    end,
    if is_list(F2) ->
	   [v_msg_Resource(Elem, [resources | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F2,
			 Path)
    end,
    ok.

v_msg_Attribute(#'Attribute'{name = F1, type = F2,
			     scalar = F3, ranges = F4, set = F5, text = F6},
		Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F3, [scalar, Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F4, [ranges, Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F5, [set, Path])
    end,
    if F6 == undefined -> ok;
       true -> 'v_msg_Value.Text'(F6, [text, Path])
    end,
    ok;
v_msg_Attribute(X, Path) ->
    mk_type_error({expected_msg, 'Attribute'}, X, Path).

v_msg_SlaveInfo(#'SlaveInfo'{hostname = F1, port = F2,
			     resources = F3, attributes = F4, id = F5,
			     checkpoint = F6, webui_hostname = F7,
			     webui_port = F8},
		Path) ->
    v_type_string(F1, [hostname | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [port, Path])
    end,
    if is_list(F3) ->
	   [v_msg_Resource(Elem, [resources | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F3,
			 Path)
    end,
    if is_list(F4) ->
	   [v_msg_Attribute(Elem, [attributes | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Attribute'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_SlaveID(F5, [id, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [checkpoint, Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [webui_hostname, Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [webui_port, Path])
    end,
    ok.

v_msg_FrameworkID(#'FrameworkID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_FrameworkID(X, Path) ->
    mk_type_error({expected_msg, 'FrameworkID'}, X, Path).

v_msg_ExecutorID(#'ExecutorID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_ExecutorID(X, Path) ->
    mk_type_error({expected_msg, 'ExecutorID'}, X, Path).

v_msg_ExecutorInfo(#'ExecutorInfo'{executor_id = F1,
				   framework_id = F2, command = F3,
				   resources = F4, name = F5, source = F6,
				   data = F7},
		   Path) ->
    v_msg_ExecutorID(F1, [executor_id | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_FrameworkID(F2, [framework_id, Path])
    end,
    v_msg_CommandInfo(F3, [command | Path]),
    if is_list(F4) ->
	   [v_msg_Resource(Elem, [resources | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [name, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [source, Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [data, Path])
    end,
    ok;
v_msg_ExecutorInfo(X, Path) ->
    mk_type_error({expected_msg, 'ExecutorInfo'}, X, Path).

v_msg_TaskID(#'TaskID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_TaskID(X, Path) ->
    mk_type_error({expected_msg, 'TaskID'}, X, Path).

v_msg_TaskInfo(#'TaskInfo'{name = F1, task_id = F2,
			   slave_id = F3, resources = F4, executor = F5,
			   command = F6, data = F7},
	       Path) ->
    v_type_string(F1, [name | Path]),
    v_msg_TaskID(F2, [task_id | Path]),
    v_msg_SlaveID(F3, [slave_id | Path]),
    if is_list(F4) ->
	   [v_msg_Resource(Elem, [resources | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_ExecutorInfo(F5, [executor, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_CommandInfo(F6, [command, Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [data, Path])
    end,
    ok.

v_msg_MasterInfo(#'MasterInfo'{id = F1, ip = F2,
			       port = F3},
		 Path) ->
    v_type_string(F1, [id | Path]),
    v_type_uint32(F2, [ip | Path]),
    v_type_uint32(F3, [port | Path]),
    ok.

v_msg_FrameworkInfo(#'FrameworkInfo'{user = F1,
				     name = F2, id = F3, failover_timeout = F4,
				     checkpoint = F5, role = F6},
		    Path) ->
    v_type_string(F1, [user | Path]),
    v_type_string(F2, [name | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_FrameworkID(F3, [id, Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [failover_timeout, Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [checkpoint, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role, Path])
    end,
    ok.

v_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						   = F1,
					       cpus_user_time_secs = F2,
					       cpus_system_time_secs = F3,
					       cpus_limit = F4,
					       cpus_nr_periods = F5,
					       cpus_nr_throttled = F6,
					       cpus_throttled_time_secs = F7,
					       mem_rss_bytes = F8,
					       mem_limit_bytes = F9,
					       mem_file_bytes = F10,
					       mem_anon_bytes = F11,
					       mem_mapped_file_bytes = F12},
			 Path) ->
    v_type_double(F1, [timestamp | Path]),
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [cpus_user_time_secs, Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [cpus_system_time_secs, Path])
    end,
    v_type_double(F4, [cpus_limit | Path]),
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [cpus_nr_periods, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [cpus_nr_throttled, Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_double(F7, [cpus_throttled_time_secs, Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [mem_rss_bytes, Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [mem_limit_bytes, Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [mem_file_bytes, Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint64(F11, [mem_anon_bytes, Path])
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_uint64(F12, [mem_mapped_file_bytes, Path])
    end,
    ok;
v_msg_ResourceStatistics(X, Path) ->
    mk_type_error({expected_msg, 'ResourceStatistics'}, X,
		  Path).

v_msg_TaskStatus(#'TaskStatus'{task_id = F1, state = F2,
			       message = F3, data = F4, slave_id = F5},
		 Path) ->
    v_msg_TaskID(F1, [task_id | Path]),
    v_enum_TaskState(F2, [state | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [message, Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [data, Path])
    end,
    if F5 == undefined -> ok;
       true -> v_msg_SlaveID(F5, [slave_id, Path])
    end,
    ok.

v_msg_Filters(#'Filters'{refuse_seconds = F1}, Path) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [refuse_seconds, Path])
    end,
    ok.

v_msg_Parameter(#'Parameter'{key = F1, value = F2},
		Path) ->
    v_type_string(F1, [key | Path]),
    v_type_string(F2, [value | Path]),
    ok;
v_msg_Parameter(X, Path) ->
    mk_type_error({expected_msg, 'Parameter'}, X, Path).

v_msg_Parameters(#'Parameters'{parameter = F1}, Path) ->
    if is_list(F1) ->
	   [v_msg_Parameter(Elem, [parameter | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Parameter'}}, F1,
			 Path)
    end,
    ok.

v_msg_Credential(#'Credential'{principal = F1,
			       secret = F2},
		 Path) ->
    v_type_string(F1, [principal | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [secret, Path])
    end,
    ok.

v_msg_ResourceUsage(#'ResourceUsage'{slave_id = F1,
				     framework_id = F2, executor_id = F3,
				     executor_name = F4, task_id = F5,
				     statistics = F6},
		    Path) ->
    v_msg_SlaveID(F1, [slave_id | Path]),
    v_msg_FrameworkID(F2, [framework_id | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_ExecutorID(F3, [executor_id, Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [executor_name, Path])
    end,
    if F5 == undefined -> ok;
       true -> v_msg_TaskID(F5, [task_id, Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_ResourceStatistics(F6, [statistics, Path])
    end,
    ok.

v_msg_OfferID(#'OfferID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_OfferID(X, Path) ->
    mk_type_error({expected_msg, 'OfferID'}, X, Path).

v_msg_Offer(#'Offer'{id = F1, framework_id = F2,
		     slave_id = F3, hostname = F4, resources = F5,
		     attributes = F6, executor_ids = F7},
	    Path) ->
    v_msg_OfferID(F1, [id | Path]),
    v_msg_FrameworkID(F2, [framework_id | Path]),
    v_msg_SlaveID(F3, [slave_id | Path]),
    v_type_string(F4, [hostname | Path]),
    if is_list(F5) ->
	   [v_msg_Resource(Elem, [resources | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F5,
			 Path)
    end,
    if is_list(F6) ->
	   [v_msg_Attribute(Elem, [attributes | Path])
	    || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Attribute'}}, F6,
			 Path)
    end,
    if is_list(F7) ->
	   [v_msg_ExecutorID(Elem, [executor_ids | Path])
	    || Elem <- F7];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ExecutorID'}},
			 F7, Path)
    end,
    ok.

'v_enum_Value.Type'('SCALAR', _Path) -> ok;
'v_enum_Value.Type'('RANGES', _Path) -> ok;
'v_enum_Value.Type'('SET', _Path) -> ok;
'v_enum_Value.Type'('TEXT', _Path) -> ok;
'v_enum_Value.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Value.Type'}, X, Path).

v_enum_TaskState('TASK_STAGING', _Path) -> ok;
v_enum_TaskState('TASK_STARTING', _Path) -> ok;
v_enum_TaskState('TASK_RUNNING', _Path) -> ok;
v_enum_TaskState('TASK_FINISHED', _Path) -> ok;
v_enum_TaskState('TASK_FAILED', _Path) -> ok;
v_enum_TaskState('TASK_KILLED', _Path) -> ok;
v_enum_TaskState('TASK_LOST', _Path) -> ok;
v_enum_TaskState(X, Path) ->
    mk_type_error({invalid_enum, 'TaskState'}, X, Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

v_type_string(S, Path) when is_list(S) ->
    try unicode:characters_to_binary(S), ok catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'Status'},
      [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
       {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}]},
     {{enum, 'Value.Type'},
      [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2},
       {'TEXT', 3}]},
     {{enum, 'TaskState'},
      [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
       {'TASK_RUNNING', 1}, {'TASK_FINISHED', 2},
       {'TASK_FAILED', 3}, {'TASK_KILLED', 4},
       {'TASK_LOST', 5}]},
     {{msg, 'Environment.Variable'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Environment'},
      [#field{name = variables, fnum = 1, rnum = 2,
	      type = {msg, 'Environment.Variable'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'CommandInfo.URI'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = executable, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'CommandInfo'},
      [#field{name = uris, fnum = 1, rnum = 2,
	      type = {msg, 'CommandInfo.URI'}, occurrence = repeated,
	      opts = []},
       #field{name = environment, fnum = 2, rnum = 3,
	      type = {msg, 'Environment'}, occurrence = optional,
	      opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Value.Text'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Value.Set'},
      [#field{name = item, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'Value.Range'},
      [#field{name = 'begin', fnum = 1, rnum = 2,
	      type = uint64, occurrence = required, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, 'Value.Ranges'},
      [#field{name = range, fnum = 1, rnum = 2,
	      type = {msg, 'Value.Range'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Value.Scalar'},
      [#field{name = value, fnum = 1, rnum = 2, type = double,
	      occurrence = required, opts = []}]},
     {{msg, 'Value'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 2, rnum = 3,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = text, fnum = 5, rnum = 6,
	      type = {msg, 'Value.Text'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Resource'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 5, rnum = 6,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]}]},
     {{msg, 'SlaveID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Request'},
      [#field{name = slave_id, fnum = 1, rnum = 2,
	      type = {msg, 'SlaveID'}, occurrence = optional,
	      opts = []},
       #field{name = resources, fnum = 2, rnum = 3,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Attribute'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 6, rnum = 6,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = text, fnum = 5, rnum = 7,
	      type = {msg, 'Value.Text'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'SlaveInfo'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = port, fnum = 8, rnum = 3, type = int32,
	      occurrence = optional, opts = [{default, 5051}]},
       #field{name = resources, fnum = 3, rnum = 4,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = attributes, fnum = 5, rnum = 5,
	      type = {msg, 'Attribute'}, occurrence = repeated,
	      opts = []},
       #field{name = id, fnum = 6, rnum = 6,
	      type = {msg, 'SlaveID'}, occurrence = optional,
	      opts = []},
       #field{name = checkpoint, fnum = 7, rnum = 7,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = webui_hostname, fnum = 2, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = webui_port, fnum = 4, rnum = 9,
	      type = int32, occurrence = optional,
	      opts = [{default, 8081}]}]},
     {{msg, 'FrameworkID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ExecutorID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ExecutorInfo'},
      [#field{name = executor_id, fnum = 1, rnum = 2,
	      type = {msg, 'ExecutorID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 8, rnum = 3,
	      type = {msg, 'FrameworkID'}, occurrence = optional,
	      opts = []},
       #field{name = command, fnum = 7, rnum = 4,
	      type = {msg, 'CommandInfo'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 5, rnum = 5,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = name, fnum = 9, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = source, fnum = 10, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = data, fnum = 4, rnum = 8, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'TaskID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'TaskInfo'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = task_id, fnum = 2, rnum = 3,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = slave_id, fnum = 3, rnum = 4,
	      type = {msg, 'SlaveID'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 4, rnum = 5,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = executor, fnum = 5, rnum = 6,
	      type = {msg, 'ExecutorInfo'}, occurrence = optional,
	      opts = []},
       #field{name = command, fnum = 7, rnum = 7,
	      type = {msg, 'CommandInfo'}, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 6, rnum = 8, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'MasterInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = [{default, 5050}]}]},
     {{msg, 'FrameworkInfo'},
      [#field{name = user, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 3, rnum = 4,
	      type = {msg, 'FrameworkID'}, occurrence = optional,
	      opts = []},
       #field{name = failover_timeout, fnum = 4, rnum = 5,
	      type = double, occurrence = optional,
	      opts = [{default, 0.0}]},
       #field{name = checkpoint, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]}]},
     {{msg, 'ResourceStatistics'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = cpus_user_time_secs, fnum = 2, rnum = 3,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_system_time_secs, fnum = 3, rnum = 4,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_limit, fnum = 4, rnum = 5,
	      type = double, occurrence = required, opts = []},
       #field{name = cpus_nr_periods, fnum = 7, rnum = 6,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_nr_throttled, fnum = 8, rnum = 7,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_throttled_time_secs, fnum = 9,
	      rnum = 8, type = double, occurrence = optional,
	      opts = []},
       #field{name = mem_rss_bytes, fnum = 5, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_limit_bytes, fnum = 6, rnum = 10,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_file_bytes, fnum = 10, rnum = 11,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_anon_bytes, fnum = 11, rnum = 12,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_mapped_file_bytes, fnum = 12,
	      rnum = 13, type = uint64, occurrence = optional,
	      opts = []}]},
     {{msg, 'TaskStatus'},
      [#field{name = task_id, fnum = 1, rnum = 2,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, 'TaskState'}, occurrence = required,
	      opts = []},
       #field{name = message, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = data, fnum = 3, rnum = 5, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = slave_id, fnum = 5, rnum = 6,
	      type = {msg, 'SlaveID'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Filters'},
      [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	      type = double, occurrence = optional,
	      opts = [{default, 5.0}]}]},
     {{msg, 'Parameter'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Parameters'},
      [#field{name = parameter, fnum = 1, rnum = 2,
	      type = {msg, 'Parameter'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Credential'},
      [#field{name = principal, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = secret, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResourceUsage'},
      [#field{name = slave_id, fnum = 1, rnum = 2,
	      type = {msg, 'SlaveID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 2, rnum = 3,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = executor_id, fnum = 3, rnum = 4,
	      type = {msg, 'ExecutorID'}, occurrence = optional,
	      opts = []},
       #field{name = executor_name, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = task_id, fnum = 5, rnum = 6,
	      type = {msg, 'TaskID'}, occurrence = optional,
	      opts = []},
       #field{name = statistics, fnum = 6, rnum = 7,
	      type = {msg, 'ResourceStatistics'},
	      occurrence = optional, opts = []}]},
     {{msg, 'OfferID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Offer'},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, 'OfferID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 2, rnum = 3,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = slave_id, fnum = 3, rnum = 4,
	      type = {msg, 'SlaveID'}, occurrence = required,
	      opts = []},
       #field{name = hostname, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = resources, fnum = 5, rnum = 6,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = attributes, fnum = 7, rnum = 7,
	      type = {msg, 'Attribute'}, occurrence = repeated,
	      opts = []},
       #field{name = executor_ids, fnum = 6, rnum = 8,
	      type = {msg, 'ExecutorID'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    ['Environment.Variable', 'Environment',
     'CommandInfo.URI', 'CommandInfo', 'Value.Text',
     'Value.Set', 'Value.Range', 'Value.Ranges',
     'Value.Scalar', 'Value', 'Resource', 'SlaveID',
     'Request', 'Attribute', 'SlaveInfo', 'FrameworkID',
     'ExecutorID', 'ExecutorInfo', 'TaskID', 'TaskInfo',
     'MasterInfo', 'FrameworkInfo', 'ResourceStatistics',
     'TaskStatus', 'Filters', 'Parameter', 'Parameters',
     'Credential', 'ResourceUsage', 'OfferID', 'Offer'].


get_enum_names() ->
    ['Status', 'Value.Type', 'TaskState'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Environment.Variable') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Environment') ->
    [#field{name = variables, fnum = 1, rnum = 2,
	    type = {msg, 'Environment.Variable'},
	    occurrence = repeated, opts = []}];
find_msg_def('CommandInfo.URI') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = executable, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('CommandInfo') ->
    [#field{name = uris, fnum = 1, rnum = 2,
	    type = {msg, 'CommandInfo.URI'}, occurrence = repeated,
	    opts = []},
     #field{name = environment, fnum = 2, rnum = 3,
	    type = {msg, 'Environment'}, occurrence = optional,
	    opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Value.Text') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Value.Set') ->
    [#field{name = item, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('Value.Range') ->
    [#field{name = 'begin', fnum = 1, rnum = 2,
	    type = uint64, occurrence = required, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def('Value.Ranges') ->
    [#field{name = range, fnum = 1, rnum = 2,
	    type = {msg, 'Value.Range'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Value.Scalar') ->
    [#field{name = value, fnum = 1, rnum = 2, type = double,
	    occurrence = required, opts = []}];
find_msg_def('Value') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 2, rnum = 3,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = text, fnum = 5, rnum = 6,
	    type = {msg, 'Value.Text'}, occurrence = optional,
	    opts = []}];
find_msg_def('Resource') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 5, rnum = 6,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]}];
find_msg_def('SlaveID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Request') ->
    [#field{name = slave_id, fnum = 1, rnum = 2,
	    type = {msg, 'SlaveID'}, occurrence = optional,
	    opts = []},
     #field{name = resources, fnum = 2, rnum = 3,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Attribute') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 6, rnum = 6,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = text, fnum = 5, rnum = 7,
	    type = {msg, 'Value.Text'}, occurrence = optional,
	    opts = []}];
find_msg_def('SlaveInfo') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = port, fnum = 8, rnum = 3, type = int32,
	    occurrence = optional, opts = [{default, 5051}]},
     #field{name = resources, fnum = 3, rnum = 4,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = attributes, fnum = 5, rnum = 5,
	    type = {msg, 'Attribute'}, occurrence = repeated,
	    opts = []},
     #field{name = id, fnum = 6, rnum = 6,
	    type = {msg, 'SlaveID'}, occurrence = optional,
	    opts = []},
     #field{name = checkpoint, fnum = 7, rnum = 7,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = webui_hostname, fnum = 2, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = webui_port, fnum = 4, rnum = 9,
	    type = int32, occurrence = optional,
	    opts = [{default, 8081}]}];
find_msg_def('FrameworkID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ExecutorID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ExecutorInfo') ->
    [#field{name = executor_id, fnum = 1, rnum = 2,
	    type = {msg, 'ExecutorID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 8, rnum = 3,
	    type = {msg, 'FrameworkID'}, occurrence = optional,
	    opts = []},
     #field{name = command, fnum = 7, rnum = 4,
	    type = {msg, 'CommandInfo'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 5, rnum = 5,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = name, fnum = 9, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = source, fnum = 10, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = data, fnum = 4, rnum = 8, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('TaskID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('TaskInfo') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = task_id, fnum = 2, rnum = 3,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = slave_id, fnum = 3, rnum = 4,
	    type = {msg, 'SlaveID'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 4, rnum = 5,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = executor, fnum = 5, rnum = 6,
	    type = {msg, 'ExecutorInfo'}, occurrence = optional,
	    opts = []},
     #field{name = command, fnum = 7, rnum = 7,
	    type = {msg, 'CommandInfo'}, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 6, rnum = 8, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('MasterInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = [{default, 5050}]}];
find_msg_def('FrameworkInfo') ->
    [#field{name = user, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 3, rnum = 4,
	    type = {msg, 'FrameworkID'}, occurrence = optional,
	    opts = []},
     #field{name = failover_timeout, fnum = 4, rnum = 5,
	    type = double, occurrence = optional,
	    opts = [{default, 0.0}]},
     #field{name = checkpoint, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]}];
find_msg_def('ResourceStatistics') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = cpus_user_time_secs, fnum = 2, rnum = 3,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_system_time_secs, fnum = 3, rnum = 4,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_limit, fnum = 4, rnum = 5,
	    type = double, occurrence = required, opts = []},
     #field{name = cpus_nr_periods, fnum = 7, rnum = 6,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_nr_throttled, fnum = 8, rnum = 7,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_throttled_time_secs, fnum = 9,
	    rnum = 8, type = double, occurrence = optional,
	    opts = []},
     #field{name = mem_rss_bytes, fnum = 5, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_limit_bytes, fnum = 6, rnum = 10,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_file_bytes, fnum = 10, rnum = 11,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_anon_bytes, fnum = 11, rnum = 12,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_mapped_file_bytes, fnum = 12,
	    rnum = 13, type = uint64, occurrence = optional,
	    opts = []}];
find_msg_def('TaskStatus') ->
    [#field{name = task_id, fnum = 1, rnum = 2,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, 'TaskState'}, occurrence = required,
	    opts = []},
     #field{name = message, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = data, fnum = 3, rnum = 5, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = slave_id, fnum = 5, rnum = 6,
	    type = {msg, 'SlaveID'}, occurrence = optional,
	    opts = []}];
find_msg_def('Filters') ->
    [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	    type = double, occurrence = optional,
	    opts = [{default, 5.0}]}];
find_msg_def('Parameter') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Parameters') ->
    [#field{name = parameter, fnum = 1, rnum = 2,
	    type = {msg, 'Parameter'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Credential') ->
    [#field{name = principal, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = secret, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('ResourceUsage') ->
    [#field{name = slave_id, fnum = 1, rnum = 2,
	    type = {msg, 'SlaveID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 2, rnum = 3,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = executor_id, fnum = 3, rnum = 4,
	    type = {msg, 'ExecutorID'}, occurrence = optional,
	    opts = []},
     #field{name = executor_name, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = task_id, fnum = 5, rnum = 6,
	    type = {msg, 'TaskID'}, occurrence = optional,
	    opts = []},
     #field{name = statistics, fnum = 6, rnum = 7,
	    type = {msg, 'ResourceStatistics'},
	    occurrence = optional, opts = []}];
find_msg_def('OfferID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Offer') ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, 'OfferID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 2, rnum = 3,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = slave_id, fnum = 3, rnum = 4,
	    type = {msg, 'SlaveID'}, occurrence = required,
	    opts = []},
     #field{name = hostname, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = resources, fnum = 5, rnum = 6,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = attributes, fnum = 7, rnum = 7,
	    type = {msg, 'Attribute'}, occurrence = repeated,
	    opts = []},
     #field{name = executor_ids, fnum = 6, rnum = 8,
	    type = {msg, 'ExecutorID'}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('Status') ->
    [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
     {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}];
find_enum_def('Value.Type') ->
    [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2}, {'TEXT', 3}];
find_enum_def('TaskState') ->
    [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
     {'TASK_RUNNING', 1}, {'TASK_FINISHED', 2},
     {'TASK_FAILED', 3}, {'TASK_KILLED', 4},
     {'TASK_LOST', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('Status', Value) ->
    enum_symbol_by_value_Status(Value);
enum_symbol_by_value('Value.Type', Value) ->
    'enum_symbol_by_value_Value.Type'(Value);
enum_symbol_by_value('TaskState', Value) ->
    enum_symbol_by_value_TaskState(Value).


enum_value_by_symbol('Status', Sym) ->
    enum_value_by_symbol_Status(Sym);
enum_value_by_symbol('Value.Type', Sym) ->
    'enum_value_by_symbol_Value.Type'(Sym);
enum_value_by_symbol('TaskState', Sym) ->
    enum_value_by_symbol_TaskState(Sym).


enum_symbol_by_value_Status(1) -> 'DRIVER_NOT_STARTED';
enum_symbol_by_value_Status(2) -> 'DRIVER_RUNNING';
enum_symbol_by_value_Status(3) -> 'DRIVER_ABORTED';
enum_symbol_by_value_Status(4) -> 'DRIVER_STOPPED'.


enum_value_by_symbol_Status('DRIVER_NOT_STARTED') -> 1;
enum_value_by_symbol_Status('DRIVER_RUNNING') -> 2;
enum_value_by_symbol_Status('DRIVER_ABORTED') -> 3;
enum_value_by_symbol_Status('DRIVER_STOPPED') -> 4.

'enum_symbol_by_value_Value.Type'(0) -> 'SCALAR';
'enum_symbol_by_value_Value.Type'(1) -> 'RANGES';
'enum_symbol_by_value_Value.Type'(2) -> 'SET';
'enum_symbol_by_value_Value.Type'(3) -> 'TEXT'.


'enum_value_by_symbol_Value.Type'('SCALAR') -> 0;
'enum_value_by_symbol_Value.Type'('RANGES') -> 1;
'enum_value_by_symbol_Value.Type'('SET') -> 2;
'enum_value_by_symbol_Value.Type'('TEXT') -> 3.

enum_symbol_by_value_TaskState(6) -> 'TASK_STAGING';
enum_symbol_by_value_TaskState(0) -> 'TASK_STARTING';
enum_symbol_by_value_TaskState(1) -> 'TASK_RUNNING';
enum_symbol_by_value_TaskState(2) -> 'TASK_FINISHED';
enum_symbol_by_value_TaskState(3) -> 'TASK_FAILED';
enum_symbol_by_value_TaskState(4) -> 'TASK_KILLED';
enum_symbol_by_value_TaskState(5) -> 'TASK_LOST'.


enum_value_by_symbol_TaskState('TASK_STAGING') -> 6;
enum_value_by_symbol_TaskState('TASK_STARTING') -> 0;
enum_value_by_symbol_TaskState('TASK_RUNNING') -> 1;
enum_value_by_symbol_TaskState('TASK_FINISHED') -> 2;
enum_value_by_symbol_TaskState('TASK_FAILED') -> 3;
enum_value_by_symbol_TaskState('TASK_KILLED') -> 4;
enum_value_by_symbol_TaskState('TASK_LOST') -> 5.


get_package_name() -> mesos.



gpb_version_as_string() ->
    "3.8".

gpb_version_as_list() ->
    [3,8].
