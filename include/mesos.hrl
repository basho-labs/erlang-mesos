%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.8 on {{2014,2,4},{19,56,27}}

-ifndef(mesos).
-define(mesos, true).

-define(mesos_gpb_version, "3.8").

-record('Environment.Variable',
        {name,                          % = 1, string
         value                          % = 2, string
        }).

-record('Environment',
        {variables = []                 % = 1, [{msg,'Environment.Variable'}]
        }).

-record('CommandInfo.URI',
        {value,                         % = 1, string
         executable                     % = 2, bool (optional)
        }).

-record('CommandInfo',
        {uris = [],                     % = 1, [{msg,'CommandInfo.URI'}]
         environment,                   % = 2, {msg,'Environment'} (optional)
         value                          % = 3, string
        }).

-record('Value.Text',
        {value                          % = 1, string
        }).

-record('Value.Set',
        {item = []                      % = 1, [string]
        }).

-record('Value.Range',
        {'begin',                       % = 1, uint64
         'end'                          % = 2, uint64
        }).

-record('Value.Ranges',
        {range = []                     % = 1, [{msg,'Value.Range'}]
        }).

-record('Value.Scalar',
        {value                          % = 1, double
        }).

-record('Value',
        {type,                          % = 1, {enum,'Value.Type'}
         scalar,                        % = 2, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 3, {msg,'Value.Ranges'} (optional)
         set,                           % = 4, {msg,'Value.Set'} (optional)
         text                           % = 5, {msg,'Value.Text'} (optional)
        }).

-record('Resource',
        {name,                          % = 1, string
         type,                          % = 2, {enum,'Value.Type'}
         scalar,                        % = 3, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 4, {msg,'Value.Ranges'} (optional)
         set,                           % = 5, {msg,'Value.Set'} (optional)
         role = "*"                     % = 6, string (optional)
        }).

-record('SlaveID',
        {value                          % = 1, string
        }).

-record('Request',
        {slave_id,                      % = 1, {msg,'SlaveID'} (optional)
         resources = []                 % = 2, [{msg,'Resource'}]
        }).

-record('Attribute',
        {name,                          % = 1, string
         type,                          % = 2, {enum,'Value.Type'}
         scalar,                        % = 3, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 4, {msg,'Value.Ranges'} (optional)
         set,                           % = 6, {msg,'Value.Set'} (optional)
         text                           % = 5, {msg,'Value.Text'} (optional)
        }).

-record('SlaveInfo',
        {hostname,                      % = 1, string
         port = 5051,                   % = 8, int32 (optional)
         resources = [],                % = 3, [{msg,'Resource'}]
         attributes = [],               % = 5, [{msg,'Attribute'}]
         id,                            % = 6, {msg,'SlaveID'} (optional)
         checkpoint = false,            % = 7, bool (optional)
         webui_hostname,                % = 2, string (optional)
         webui_port = 8081              % = 4, int32 (optional)
        }).

-record('FrameworkID',
        {value                          % = 1, string
        }).

-record('ExecutorID',
        {value                          % = 1, string
        }).

-record('ExecutorInfo',
        {executor_id,                   % = 1, {msg,'ExecutorID'}
         framework_id,                  % = 8, {msg,'FrameworkID'} (optional)
         command,                       % = 7, {msg,'CommandInfo'}
         resources = [],                % = 5, [{msg,'Resource'}]
         name,                          % = 9, string (optional)
         source,                        % = 10, string (optional)
         data                           % = 4, bytes (optional)
        }).

-record('TaskID',
        {value                          % = 1, string
        }).

-record('TaskInfo',
        {name,                          % = 1, string
         task_id,                       % = 2, {msg,'TaskID'}
         slave_id,                      % = 3, {msg,'SlaveID'}
         resources = [],                % = 4, [{msg,'Resource'}]
         executor,                      % = 5, {msg,'ExecutorInfo'} (optional)
         command,                       % = 7, {msg,'CommandInfo'} (optional)
         data                           % = 6, bytes (optional)
        }).

-record('MasterInfo',
        {id,                            % = 1, string
         ip,                            % = 2, uint32
         port = 5050                    % = 3, uint32
        }).

-record('FrameworkInfo',
        {user,                          % = 1, string
         name,                          % = 2, string
         id,                            % = 3, {msg,'FrameworkID'} (optional)
         failover_timeout = 0.0,        % = 4, double (optional)
         checkpoint = false,            % = 5, bool (optional)
         role = "*"                     % = 6, string (optional)
        }).

-record('ResourceStatistics',
        {timestamp,                     % = 1, double
         cpus_user_time_secs,           % = 2, double (optional)
         cpus_system_time_secs,         % = 3, double (optional)
         cpus_limit,                    % = 4, double
         cpus_nr_periods,               % = 7, uint32 (optional)
         cpus_nr_throttled,             % = 8, uint32 (optional)
         cpus_throttled_time_secs,      % = 9, double (optional)
         mem_rss_bytes,                 % = 5, uint64 (optional)
         mem_limit_bytes,               % = 6, uint64 (optional)
         mem_file_bytes,                % = 10, uint64 (optional)
         mem_anon_bytes,                % = 11, uint64 (optional)
         mem_mapped_file_bytes          % = 12, uint64 (optional)
        }).

-record('TaskStatus',
        {task_id,                       % = 1, {msg,'TaskID'}
         state,                         % = 2, {enum,'TaskState'}
         message,                       % = 4, string (optional)
         data,                          % = 3, bytes (optional)
         slave_id                       % = 5, {msg,'SlaveID'} (optional)
        }).

-record('Filters',
        {refuse_seconds = 5.0           % = 1, double (optional)
        }).

-record('Parameter',
        {key,                           % = 1, string
         value                          % = 2, string
        }).

-record('Parameters',
        {parameter = []                 % = 1, [{msg,'Parameter'}]
        }).

-record('Credential',
        {principal,                     % = 1, string
         secret                         % = 2, bytes (optional)
        }).

-record('ResourceUsage',
        {slave_id,                      % = 1, {msg,'SlaveID'}
         framework_id,                  % = 2, {msg,'FrameworkID'}
         executor_id,                   % = 3, {msg,'ExecutorID'} (optional)
         executor_name,                 % = 4, string (optional)
         task_id,                       % = 5, {msg,'TaskID'} (optional)
         statistics                     % = 6, {msg,'ResourceStatistics'} (optional)
        }).

-record('OfferID',
        {value                          % = 1, string
        }).

-record('Offer',
        {id,                            % = 1, {msg,'OfferID'}
         framework_id,                  % = 2, {msg,'FrameworkID'}
         slave_id,                      % = 3, {msg,'SlaveID'}
         hostname,                      % = 4, string
         resources = [],                % = 5, [{msg,'Resource'}]
         attributes = [],               % = 7, [{msg,'Attribute'}]
         executor_ids = []              % = 6, [{msg,'ExecutorID'}]
        }).

-endif.
